// nvd-cve-osv converts NVD CVEs to OSV format.
package main

import (
	"encoding/csv"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"slices"

	"github.com/google/osv/vulnfeeds/cves"
	"github.com/google/osv/vulnfeeds/git"
	"github.com/google/osv/vulnfeeds/models"
	"github.com/google/osv/vulnfeeds/utility/logger"
	"github.com/google/osv/vulnfeeds/vulns"
)

type ConversionOutcome int

var ErrNoRanges = errors.New("no ranges")

var ErrUnresolvedFix = errors.New("fixes not resolved to commits")

func (c ConversionOutcome) String() string {
	return [...]string{"ConversionUnknown", "Successful", "Rejected", "NoSoftware", "NoRepos", "NoRanges", "FixUnresolvable"}[c]
}

const (
	extension = ".json"
)

const (
	// Set of enums for categorizing conversion outcomes.
	ConversionUnknown ConversionOutcome = iota // Shouldn't happen
	Successful                                 // It worked!
	Rejected                                   // The CVE was rejected
	NoSoftware                                 // The CVE had no CPEs relating to software (i.e. Operating Systems or Hardware).
	NoRepos                                    // The CPE Vendor/Product had no repositories derived for it.
	NoRanges                                   // No viable commit ranges could be calculated from the repository for the CVE's CPE(s).
	FixUnresolvable                            // Partial resolution of versions, resulting in a false positive.
)

var (
	jsonPath            = flag.String("nvd_json", "", "Path to NVD CVE JSON to examine.")
	parsedCPEDictionary = flag.String("cpe_repos", "", "Path to JSON mapping of CPEs to repos generated by cpe-repo-gen")
	outDir              = flag.String("out_dir", "", "Path to output results.")
	outFormat           = flag.String("out_format", "OSV", "Format to output {OSV,PackageInfo}")
)
var RepoTagsCache git.RepoTagsCache
var Metrics struct {
	TotalCVEs           int
	CVEsForApplications int
	CVEsForKnownRepos   int
	OSVRecordsGenerated int
	Outcomes            map[cves.CVEID]ConversionOutcome // Per-CVE-ID record of conversion result.
}

// Takes an NVD CVE record and outputs an OSV file in the specified directory.
func CVEToOSV(cve cves.CVE, repos []string, cache git.RepoTagsCache, directory string) error {
	CPEs := cves.CPEs(cve)
	// The vendor name and product name are used to construct the output `vulnDir` below, so need to be set to *something* to keep the output tidy.
	maybeVendorName := "ENOCPE"
	maybeProductName := "ENOCPE"

	if len(CPEs) > 0 {
		CPE, err := cves.ParseCPE(CPEs[0]) // For naming the subdirectory used for output.
		maybeVendorName = CPE.Vendor
		maybeProductName = CPE.Product
		if err != nil {
			return fmt.Errorf("[%s]: Can't generate an OSV record without valid CPE data", cve.ID)
		}
	}

	v := vulns.FromNVDCVE(cve.ID, cve)
	versions, notes := cves.ExtractVersionInfo(cve, nil, http.DefaultClient)

	if len(versions.AffectedVersions) != 0 {
		var err error
		// There are some AffectedVersions to try and resolve to AffectedCommits.
		if len(repos) == 0 {
			return fmt.Errorf("[%s]: No affected ranges for %q, and no repos to try and convert %+v to tags with", cve.ID, maybeProductName, versions.AffectedVersions)
		}
		logger.Info("Trying to convert version tags to commits", slog.String("cve", string(cve.ID)), slog.Any("versions", versions), slog.Any("repos", repos))
		versions, err = cves.GitVersionsToCommits(cve.ID, versions, repos, cache)
		if err != nil {
			return fmt.Errorf("[%s]: Failed to convert version tags to commits: %#w", cve.ID, err)
		}
		hasAnyFixedCommits := false
		for _, repo := range repos {
			if versions.HasFixedCommits(repo) {
				hasAnyFixedCommits = true
				break
			}
		}

		if versions.HasFixedVersions() && !hasAnyFixedCommits {
			return fmt.Errorf("[%s]: Failed to convert fixed version tags to commits: %#v %w", cve.ID, versions, ErrUnresolvedFix)
		}

		hasAnyLastAffectedCommits := false
		for _, repo := range repos {
			if versions.HasLastAffectedCommits(repo) {
				hasAnyLastAffectedCommits = true
				break
			}
		}

		if versions.HasLastAffectedVersions() && !hasAnyLastAffectedCommits && !hasAnyFixedCommits {
			return fmt.Errorf("[%s]: Failed to convert last_affected version tags to commits: %#v %w", cve.ID, versions, ErrUnresolvedFix)
		}
	}

	slices.SortStableFunc(versions.AffectedCommits, models.AffectedCommitCompare)

	vulns.AttachExtractedVersionInfo(v, versions)

	if len(v.Affected) == 0 {
		return fmt.Errorf("[%s]: No affected ranges detected for %q %w", cve.ID, maybeProductName, ErrNoRanges)
	}

	vulnDir := filepath.Join(directory, maybeVendorName, maybeProductName)
	err := os.MkdirAll(vulnDir, 0755)
	if err != nil {
		logger.Warn("Failed to create dir", slog.Any("err", err))
		return fmt.Errorf("failed to create dir: %w", err)
	}
	outputFile := filepath.Join(vulnDir, v.Id+extension)
	notesFile := filepath.Join(vulnDir, v.Id+".notes")
	f, err := os.Create(outputFile)
	if err != nil {
		logger.Warn("Failed to open for writing", slog.String("path", outputFile), slog.Any("err", err))
		return fmt.Errorf("failed to open %s for writing: %w", outputFile, err)
	}
	defer f.Close()
	err = v.ToJSON(f)
	if err != nil {
		logger.Warn("Failed to write", slog.String("path", outputFile), slog.Any("err", err))
		return fmt.Errorf("failed to write %s: %w", outputFile, err)
	}
	logger.Info("Generated OSV record", slog.String("cve", string(cve.ID)), slog.String("product", maybeProductName))
	if len(notes) > 0 {
		err = os.WriteFile(notesFile, []byte(strings.Join(notes, "\n")), 0600)
		if err != nil {
			logger.Warn("Failed to write", slog.String("cve", string(cve.ID)), slog.String("path", notesFile), slog.Any("err", err))
		}
	}

	return nil
}

// Takes an NVD CVE record and outputs a PackageInfo struct in a file in the specified directory.
func CVEToPackageInfo(cve cves.CVE, repos []string, cache git.RepoTagsCache, directory string) error {
	CPEs := cves.CPEs(cve)
	// The vendor name and product name are used to construct the output `vulnDir` below, so need to be set to *something* to keep the output tidy.
	maybeVendorName := "ENOCPE"
	maybeProductName := "ENOCPE"

	if len(CPEs) > 0 {
		CPE, err := cves.ParseCPE(CPEs[0]) // For naming the subdirectory used for output.
		maybeVendorName = CPE.Vendor
		maybeProductName = CPE.Product
		if err != nil {
			return fmt.Errorf("[%s]: Can't generate an OSV record without valid CPE data", cve.ID)
		}
	}

	// more often than not, this yields a VersionInfo with AffectedVersions and no AffectedCommits.
	versions, notes := cves.ExtractVersionInfo(cve, nil, http.DefaultClient)

	if len(versions.AffectedVersions) != 0 {
		var err error
		// There are some AffectedVersions to try and resolve to AffectedCommits.
		if len(repos) == 0 {
			return fmt.Errorf("[%s]: No affected ranges for %q, and no repos to try and convert %+v to tags with", cve.ID, maybeProductName, versions.AffectedVersions)
		}
		logger.Info("Trying to convert version tags to commits", slog.String("cve", string(cve.ID)), slog.Any("versions", versions), slog.Any("repos", repos))
		versions, err = cves.GitVersionsToCommits(cve.ID, versions, repos, cache)
		if err != nil {
			return fmt.Errorf("[%s]: Failed to convert version tags to commits: %#w", cve.ID, err)
		}
	}

	hasAnyFixedCommits := false
	for _, repo := range repos {
		if versions.HasFixedCommits(repo) {
			hasAnyFixedCommits = true
		}
	}

	if versions.HasFixedVersions() && !hasAnyFixedCommits {
		return fmt.Errorf("[%s]: Failed to convert fixed version tags to commits: %#v %w", cve.ID, versions, ErrUnresolvedFix)
	}

	hasAnyLastAffectedCommits := false
	for _, repo := range repos {
		if versions.HasLastAffectedCommits(repo) {
			hasAnyLastAffectedCommits = true
		}
	}

	if versions.HasLastAffectedVersions() && !hasAnyLastAffectedCommits && !hasAnyFixedCommits {
		return fmt.Errorf("[%s]: Failed to convert last_affected version tags to commits: %#v %w", cve.ID, versions, ErrUnresolvedFix)
	}

	if len(versions.AffectedCommits) == 0 {
		return fmt.Errorf("[%s]: No affected commit ranges determined for %q %w", cve.ID, maybeProductName, ErrNoRanges)
	}

	versions.AffectedVersions = nil // these have served their purpose and are not required in the resulting output.

	slices.SortStableFunc(versions.AffectedCommits, models.AffectedCommitCompare)

	var pkgInfos []vulns.PackageInfo
	pi := vulns.PackageInfo{VersionInfo: versions}
	pkgInfos = append(pkgInfos, pi) // combine-to-osv expects a serialised *array* of PackageInfo

	vulnDir := filepath.Join(directory, maybeVendorName, maybeProductName)
	err := os.MkdirAll(vulnDir, 0755)
	if err != nil {
		logger.Warn("Failed to create dir", slog.Any("err", err))
		return fmt.Errorf("failed to create dir: %w", err)
	}

	outputFile := filepath.Join(vulnDir, string(cve.ID)+".nvd"+extension)
	notesFile := filepath.Join(vulnDir, string(cve.ID)+".nvd.notes")
	f, err := os.Create(outputFile)
	if err != nil {
		logger.Warn("Failed to open for writing", slog.String("path", outputFile), slog.Any("err", err))
		return fmt.Errorf("failed to open %s for writing: %w", outputFile, err)
	}
	defer f.Close()

	encoder := json.NewEncoder(f)
	encoder.SetIndent("", "  ")
	err = encoder.Encode(&pkgInfos)

	if err != nil {
		logger.Warn("Failed to encode PackageInfo", slog.String("path", outputFile), slog.Any("err", err))
		return fmt.Errorf("failed to encode PackageInfo to %s: %w", outputFile, err)
	}

	logger.Info("Generated PackageInfo record", slog.String("cve", string(cve.ID)), slog.String("product", maybeProductName))

	if len(notes) > 0 {
		err = os.WriteFile(notesFile, []byte(strings.Join(notes, "\n")), 0600)
		if err != nil {
			logger.Warn("Failed to write", slog.String("cve", string(cve.ID)), slog.String("path", notesFile), slog.Any("err", err))
		}
	}

	return nil
}

func loadCPEDictionary(productToRepo *cves.VendorProductToRepoMap, f string) error {
	data, err := os.ReadFile(f)
	if err != nil {
		return err
	}

	return json.Unmarshal(data, &productToRepo)
}

// Output a CSV summarizing per-CVE how it was handled.
func outputOutcomes(outcomes map[cves.CVEID]ConversionOutcome, reposForCVE map[cves.CVEID][]string, directory string) error {
	outcomesFile, err := os.Create(filepath.Join(directory, "outcomes.csv"))
	if err != nil {
		return err
	}
	defer outcomesFile.Close()
	w := csv.NewWriter(outcomesFile)
	if err := w.Write([]string{"CVE", "outcome", "repos"}); err != nil {
		return err
	}
	for CVE, outcome := range outcomes {
		// It's conceivable to have more than one repo for a CVE, so concatenate them.
		r := ""
		if repos, ok := reposForCVE[CVE]; ok {
			r = strings.Join(repos, " ")
		}
		if err := w.Write([]string{string(CVE), outcome.String(), r}); err != nil {
			return err
		}
	}
	w.Flush()

	if err = w.Error(); err != nil {
		return err
	}

	return nil
}

func main() {
	flag.Parse()
	if !slices.Contains([]string{"OSV", "PackageInfo"}, *outFormat) {
		fmt.Fprintf(os.Stderr, "Unsupported output format: %s\n", *outFormat)
		os.Exit(1)
	}

	Metrics.Outcomes = make(map[cves.CVEID]ConversionOutcome)

	logger.InitGlobalLogger()

	data, err := os.ReadFile(*jsonPath)
	if err != nil {
		logger.Fatal("Failed to open file", slog.Any("err", err)) // double check this is best practice output
	}

	var parsed cves.CVEAPIJSON20Schema
	err = json.Unmarshal(data, &parsed)
	if err != nil {
		logger.Fatal("Failed to parse NVD CVE JSON", slog.Any("err", err))
	}

	VPRepoCache := make(cves.VendorProductToRepoMap)

	if *parsedCPEDictionary != "" {
		err = loadCPEDictionary(&VPRepoCache, *parsedCPEDictionary)
		if err != nil {
			logger.Fatal("Failed to load parsed CPE dictionary", slog.Any("err", err))
		}
		logger.Info("VendorProductToRepoMap cache has entries preloaded", slog.Int("count", len(VPRepoCache)))
	}

	ReposForCVE := make(map[cves.CVEID][]string)

	for _, cve := range parsed.Vulnerabilities {
		refs := cve.CVE.References
		CPEs := cves.CPEs(cve.CVE)
		CVEID := cve.CVE.ID

		if len(refs) == 0 && len(CPEs) == 0 {
			logger.Info("Skipping due to lack of CPEs and lack of references", slog.String("cve", string(CVEID)))
			// 100% of these in 2022 were rejected CVEs
			Metrics.Outcomes[CVEID] = Rejected

			continue
		}

		// Edge case: No CPEs, but perhaps usable references.
		if len(refs) > 0 && len(CPEs) == 0 {
			repos := cves.ReposFromReferences(string(CVEID), nil, nil, refs, cves.RefTagDenyList)
			if len(repos) == 0 {
				logger.Warn("Failed to derive any repos and there were no CPEs", slog.String("cve", string(CVEID)))
				continue
			}
			logger.Info("Derived repos for CVE with no CPEs", slog.String("cve", string(CVEID)), slog.Any("repos", repos))
			ReposForCVE[CVEID] = repos
		}

		// Does it have any application CPEs? Look for pre-computed repos based on VendorProduct.
		appCPECount := 0
		for _, CPEstr := range cves.CPEs(cve.CVE) {
			CPE, err := cves.ParseCPE(CPEstr)
			if err != nil {
				logger.Warn("Failed to parse CPE", slog.String("cve", string(CVEID)), slog.String("cpe", CPEstr), slog.Any("err", err))
				Metrics.Outcomes[CVEID] = ConversionUnknown

				continue
			}
			if CPE.Part == "a" {
				appCPECount += 1
			}
			vendorProductKey := cves.VendorProduct{Vendor: CPE.Vendor, Product: CPE.Product}
			if _, ok := VPRepoCache[vendorProductKey]; ok {
				logger.Info("Pre-references, derived repos using cache", slog.String("cve", string(CVEID)), slog.Any("repos", VPRepoCache[vendorProductKey]), slog.String("vendor", CPE.Vendor), slog.String("product", CPE.Product))
				if _, ok := ReposForCVE[CVEID]; !ok {
					ReposForCVE[CVEID] = VPRepoCache[vendorProductKey]
					continue
				}
				// Don't append duplicates.
				for _, repo := range VPRepoCache[vendorProductKey] {
					if !slices.Contains(ReposForCVE[CVEID], repo) {
						ReposForCVE[CVEID] = append(ReposForCVE[CVEID], repo)
					}
				}
			}
		}

		if len(CPEs) > 0 && appCPECount == 0 {
			// This CVE is not for software (based on there being CPEs but not any application ones), skip.
			Metrics.Outcomes[CVEID] = NoSoftware
			continue
		}

		if appCPECount > 0 {
			Metrics.CVEsForApplications++
		}

		// If there wasn't a repo from the CPE Dictionary, try and derive one from the CVE references.
		if _, ok := ReposForCVE[CVEID]; !ok && len(refs) > 0 {
			for _, CPEstr := range cves.CPEs(cve.CVE) {
				CPE, err := cves.ParseCPE(CPEstr)
				if err != nil {
					logger.Warn("Failed to parse CPE", slog.String("cve", string(CVEID)), slog.String("cpe", CPEstr), slog.Any("err", err))
					continue
				}
				// Continue to only focus on application CPEs.
				if CPE.Part != "a" {
					continue
				}
				if slices.Contains(cves.VendorProductDenyList, cves.VendorProduct{Vendor: CPE.Vendor, Product: ""}) {
					continue
				}
				if slices.Contains(cves.VendorProductDenyList, cves.VendorProduct{Vendor: CPE.Vendor, Product: CPE.Product}) {
					continue
				}
				repos := cves.ReposFromReferences(string(CVEID), VPRepoCache, &cves.VendorProduct{Vendor: CPE.Vendor, Product: CPE.Product}, refs, cves.RefTagDenyList)
				if len(repos) == 0 {
					logger.Warn("Failed to derive any repos", slog.String("cve", string(CVEID)), slog.String("vendor", CPE.Vendor), slog.String("product", CPE.Product))
					continue
				}
				logger.Info("Derived repos", slog.String("cve", string(CVEID)), slog.Any("repos", repos), slog.String("vendor", CPE.Vendor), slog.String("product", CPE.Product))
				ReposForCVE[CVEID] = repos
			}
		}

		logger.Info("Finished processing "+string(CVEID),
			slog.String("cve", string(CVEID)),
			slog.Int("cpes", len(CPEs)),
			slog.Int("app_cpes", appCPECount),
			slog.Int("derived_repos", len(ReposForCVE[CVEID])))

		// If we've made it to here, we may have a CVE:
		// * that has Application-related CPEs (so applies to software)
		// * has a reference that is a known repository URL
		// OR
		// * a derived repository for the software package
		//
		// We do not yet have:
		// * any knowledge of the language used
		// * definitive version information

		if _, ok := ReposForCVE[CVEID]; !ok {
			// We have nothing useful to work with, so we'll assume it's out of scope
			logger.Info("Passing due to lack of viable repository", slog.String("cve", string(CVEID)))
			Metrics.Outcomes[CVEID] = NoRepos

			continue
		}

		logger.Info("Found Repos for CVE "+string(CVEID), slog.String("cve", string(CVEID)), slog.Any("repos", ReposForCVE[CVEID]))

		Metrics.CVEsForKnownRepos++

		switch *outFormat {
		case "OSV":
			err = CVEToOSV(cve.CVE, ReposForCVE[CVEID], RepoTagsCache, *outDir)
		case "PackageInfo":
			err = CVEToPackageInfo(cve.CVE, ReposForCVE[CVEID], RepoTagsCache, *outDir)
		}
		// Parse this error to determine which failure mode it was
		if err != nil {
			logger.Warn("Failed to generate an OSV record", slog.String("cve", string(CVEID)), slog.Any("err", err))
			if errors.Is(err, ErrNoRanges) {
				Metrics.Outcomes[CVEID] = NoRanges
				continue
			}
			if errors.Is(err, ErrUnresolvedFix) {
				Metrics.Outcomes[CVEID] = FixUnresolvable
				continue
			}
			Metrics.Outcomes[CVEID] = ConversionUnknown

			continue
		}
		Metrics.OSVRecordsGenerated++
		Metrics.Outcomes[CVEID] = Successful
	}
	Metrics.TotalCVEs = len(parsed.Vulnerabilities)
	err = outputOutcomes(Metrics.Outcomes, ReposForCVE, *outDir)
	if err != nil {
		// Log entry with size 1.15M exceeds maximum size of 256.0K
		fmt.Fprintf(os.Stderr, "Failed to write out metrics: %v", err)
	}
	// Outcomes is too big to log, so zero it out.
	Metrics.Outcomes = nil
	logger.Info("Metrics", slog.String("path", filepath.Base(*jsonPath)), slog.Any("metrics", Metrics))
}
