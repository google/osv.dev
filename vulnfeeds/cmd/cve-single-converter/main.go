// Package main converts a single CVE5 to OSV format
package main

import (
	"encoding/json"
	"flag"
	"log/slog"
	"os"

	"github.com/google/osv/vulnfeeds/cvelist2osv"
	"github.com/google/osv/vulnfeeds/cves"
	"github.com/google/osv/vulnfeeds/utility/logger"
)

var (
	jsonPath = flag.String("cve_json", "", "Path to CVEList JSON to examine.")
	outDir   = flag.String("out_dir", "", "Path to output results.")
)

func main() {
	flag.Parse()

	logger.InitGlobalLogger()

	// Read the input CVE JSON file.
	data, err := os.ReadFile(*jsonPath)
	if err != nil {
		logger.Fatal("Failed to open file", slog.Any("err", err))
	}

	var cve cves.CVE5
	if err = json.Unmarshal(data, &cve); err != nil {
		logger.Fatal("Failed to parse CVEList CVE JSON", slog.Any("err", err))
	}
	err = os.MkdirAll(*outDir, 0755)
	if err != nil {
		logger.Warn("Failed to create dir", slog.Any("err", err))
	}
	// create the files
	osvFile, err := cvelist2osv.WriteOSVToFile(cve.Metadata.CVEID, *outDir)
	defer osvFile.Close()

	metricsFile, err := cvelist2osv.WriteMetricToFile(cve.Metadata.CVEID, *outDir)
	defer metricsFile.Close()

	cveId := cve.Metadata.CVEID
	// Perform the conversion and export the results.
	if err = cvelist2osv.ConvertAndExportCVEToOSV(cve, osvFile, metricsFile); err != nil {
		logger.Warn("Failed to generate an OSV record", slog.String("cve", string(cveId)), slog.Any("err", err))
	} else {
		logger.Info("Generated OSV record for "+string(cveId), slog.String("cve", string(cveId)), slog.String("cna", cve.Metadata.AssignerShortName))
	}
}
