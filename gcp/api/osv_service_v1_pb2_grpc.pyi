"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2021 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import abc
import collections.abc
import grpc
import grpc.aio
import osv_service_v1_pb2
import typing
import vulnerability_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class OSVStub:
    """Open source vulnerability database."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetVulnById: grpc.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.GetVulnByIdParameters,
        vulnerability_pb2.Vulnerability,
    ]
    """Return a `Vulnerability` object for a given OSV ID."""

    QueryAffected: grpc.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.QueryAffectedParameters,
        osv_service_v1_pb2.VulnerabilityList,
    ]
    """Query vulnerabilities for a particular project at a given commit or
    version.
    """

    QueryAffectedBatch: grpc.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.QueryAffectedBatchParameters,
        osv_service_v1_pb2.BatchVulnerabilityList,
    ]
    """Query vulnerabilities (batched) for given package versions and commits.
    This currently allows a maximum of 1000 package versions to be included in
    a single query.
    """

    DetermineVersion: grpc.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.DetermineVersionParameters,
        osv_service_v1_pb2.VersionMatchList,
    ]
    """Determine the version of the provided hash values."""

    ImportFindings: grpc.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.ImportFindingsParameters,
        osv_service_v1_pb2.ImportFindingList,
    ]
    """Get import findings per source."""

class OSVAsyncStub:
    """Open source vulnerability database."""

    GetVulnById: grpc.aio.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.GetVulnByIdParameters,
        vulnerability_pb2.Vulnerability,
    ]
    """Return a `Vulnerability` object for a given OSV ID."""

    QueryAffected: grpc.aio.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.QueryAffectedParameters,
        osv_service_v1_pb2.VulnerabilityList,
    ]
    """Query vulnerabilities for a particular project at a given commit or
    version.
    """

    QueryAffectedBatch: grpc.aio.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.QueryAffectedBatchParameters,
        osv_service_v1_pb2.BatchVulnerabilityList,
    ]
    """Query vulnerabilities (batched) for given package versions and commits.
    This currently allows a maximum of 1000 package versions to be included in
    a single query.
    """

    DetermineVersion: grpc.aio.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.DetermineVersionParameters,
        osv_service_v1_pb2.VersionMatchList,
    ]
    """Determine the version of the provided hash values."""

    ImportFindings: grpc.aio.UnaryUnaryMultiCallable[
        osv_service_v1_pb2.ImportFindingsParameters,
        osv_service_v1_pb2.ImportFindingList,
    ]
    """Get import findings per source."""

class OSVServicer(metaclass=abc.ABCMeta):
    """Open source vulnerability database."""

    @abc.abstractmethod
    def GetVulnById(
        self,
        request: osv_service_v1_pb2.GetVulnByIdParameters,
        context: _ServicerContext,
    ) -> typing.Union[vulnerability_pb2.Vulnerability, collections.abc.Awaitable[vulnerability_pb2.Vulnerability]]:
        """Return a `Vulnerability` object for a given OSV ID."""

    @abc.abstractmethod
    def QueryAffected(
        self,
        request: osv_service_v1_pb2.QueryAffectedParameters,
        context: _ServicerContext,
    ) -> typing.Union[osv_service_v1_pb2.VulnerabilityList, collections.abc.Awaitable[osv_service_v1_pb2.VulnerabilityList]]:
        """Query vulnerabilities for a particular project at a given commit or
        version.
        """

    @abc.abstractmethod
    def QueryAffectedBatch(
        self,
        request: osv_service_v1_pb2.QueryAffectedBatchParameters,
        context: _ServicerContext,
    ) -> typing.Union[osv_service_v1_pb2.BatchVulnerabilityList, collections.abc.Awaitable[osv_service_v1_pb2.BatchVulnerabilityList]]:
        """Query vulnerabilities (batched) for given package versions and commits.
        This currently allows a maximum of 1000 package versions to be included in
        a single query.
        """

    @abc.abstractmethod
    def DetermineVersion(
        self,
        request: osv_service_v1_pb2.DetermineVersionParameters,
        context: _ServicerContext,
    ) -> typing.Union[osv_service_v1_pb2.VersionMatchList, collections.abc.Awaitable[osv_service_v1_pb2.VersionMatchList]]:
        """Determine the version of the provided hash values."""

    @abc.abstractmethod
    def ImportFindings(
        self,
        request: osv_service_v1_pb2.ImportFindingsParameters,
        context: _ServicerContext,
    ) -> typing.Union[osv_service_v1_pb2.ImportFindingList, collections.abc.Awaitable[osv_service_v1_pb2.ImportFindingList]]:
        """Get import findings per source."""

def add_OSVServicer_to_server(servicer: OSVServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
