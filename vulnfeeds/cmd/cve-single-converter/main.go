// Package main converts a single CVE5 to OSV format
package main

import (
	"encoding/json"
	"flag"
	"log/slog"
	"os"

	"github.com/google/osv/vulnfeeds/cvelist2osv"
	"github.com/google/osv/vulnfeeds/cves"
	"github.com/google/osv/vulnfeeds/utility/logger"
)

var (
	jsonPath = flag.String("cve_json", "", "Path to CVEList JSON to examine.")
	outDir   = flag.String("out_dir", "", "Path to output results.")
)

func main() {
	flag.Parse()

	logger.InitGlobalLogger()

	// Read the input CVE JSON file.
	data, err := os.ReadFile(*jsonPath)
	if err != nil {
		logger.Fatal("Failed to open file", slog.Any("err", err))
	}

	var cve cves.CVE5
	if err = json.Unmarshal(data, &cve); err != nil {
		logger.Fatal("Failed to parse CVEList CVE JSON", slog.Any("err", err))
	}

	outDir := *outDir
	if outDir == "" {
		outDir = cve.Metadata.AssignerShortName
	}
	cveID := cve.Metadata.CVEID
	err = os.MkdirAll(outDir, 0755)
	if err != nil {
		logger.Warn("Failed to create dir", slog.Any("err", err))
	}
	// create the files

	osvFile, errCVE := cvelist2osv.CreateOSVFile(cveID, outDir)
	metricsFile, errMetrics := cvelist2osv.CreateMetricsFile(cveID, outDir)
	if errCVE != nil || errMetrics != nil {
		logger.Fatal("File failed to be created for CVE", slog.String("cve", string(cveID)))
	}

	// Perform the conversion and export the results.
	if err = cvelist2osv.ConvertAndExportCVEToOSV(cve, osvFile, metricsFile); err != nil {
		logger.Warn("Failed to generate an OSV record", slog.String("cve", string(cveID)), slog.Any("err", err))
	} else {
		logger.Info("Generated OSV record for "+string(cveID), slog.String("cve", string(cveID)), slog.String("cna", cve.Metadata.AssignerShortName))
	}

	metricsFile.Close()
	osvFile.Close()
}
