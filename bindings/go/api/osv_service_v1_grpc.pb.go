// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.5
// source: osv_service_v1.proto

package api

import (
	context "context"
	osvschema "github.com/ossf/osv-schema/bindings/go/osvschema"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OSV_GetVulnById_FullMethodName        = "/osv.v1.OSV/GetVulnById"
	OSV_QueryAffected_FullMethodName      = "/osv.v1.OSV/QueryAffected"
	OSV_QueryAffectedBatch_FullMethodName = "/osv.v1.OSV/QueryAffectedBatch"
	OSV_DetermineVersion_FullMethodName   = "/osv.v1.OSV/DetermineVersion"
	OSV_ImportFindings_FullMethodName     = "/osv.v1.OSV/ImportFindings"
)

// OSVClient is the client API for OSV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Open source vulnerability database.
type OSVClient interface {
	// Return a `Vulnerability` object for a given OSV ID.
	GetVulnById(ctx context.Context, in *GetVulnByIdParameters, opts ...grpc.CallOption) (*osvschema.Vulnerability, error)
	// Query vulnerabilities for a particular project at a given commit or
	// version.
	QueryAffected(ctx context.Context, in *QueryAffectedParameters, opts ...grpc.CallOption) (*VulnerabilityList, error)
	// Query vulnerabilities (batched) for given package versions and commits.
	// This currently allows a maximum of 1000 package versions to be included in
	// a single query.
	QueryAffectedBatch(ctx context.Context, in *QueryAffectedBatchParameters, opts ...grpc.CallOption) (*BatchVulnerabilityList, error)
	// Determine the version of the provided hash values.
	DetermineVersion(ctx context.Context, in *DetermineVersionParameters, opts ...grpc.CallOption) (*VersionMatchList, error)
	// Get import findings per source.
	ImportFindings(ctx context.Context, in *ImportFindingsParameters, opts ...grpc.CallOption) (*ImportFindingList, error)
}

type oSVClient struct {
	cc grpc.ClientConnInterface
}

func NewOSVClient(cc grpc.ClientConnInterface) OSVClient {
	return &oSVClient{cc}
}

func (c *oSVClient) GetVulnById(ctx context.Context, in *GetVulnByIdParameters, opts ...grpc.CallOption) (*osvschema.Vulnerability, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(osvschema.Vulnerability)
	err := c.cc.Invoke(ctx, OSV_GetVulnById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSVClient) QueryAffected(ctx context.Context, in *QueryAffectedParameters, opts ...grpc.CallOption) (*VulnerabilityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VulnerabilityList)
	err := c.cc.Invoke(ctx, OSV_QueryAffected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSVClient) QueryAffectedBatch(ctx context.Context, in *QueryAffectedBatchParameters, opts ...grpc.CallOption) (*BatchVulnerabilityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchVulnerabilityList)
	err := c.cc.Invoke(ctx, OSV_QueryAffectedBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSVClient) DetermineVersion(ctx context.Context, in *DetermineVersionParameters, opts ...grpc.CallOption) (*VersionMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionMatchList)
	err := c.cc.Invoke(ctx, OSV_DetermineVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSVClient) ImportFindings(ctx context.Context, in *ImportFindingsParameters, opts ...grpc.CallOption) (*ImportFindingList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportFindingList)
	err := c.cc.Invoke(ctx, OSV_ImportFindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSVServer is the server API for OSV service.
// All implementations must embed UnimplementedOSVServer
// for forward compatibility.
//
// Open source vulnerability database.
type OSVServer interface {
	// Return a `Vulnerability` object for a given OSV ID.
	GetVulnById(context.Context, *GetVulnByIdParameters) (*osvschema.Vulnerability, error)
	// Query vulnerabilities for a particular project at a given commit or
	// version.
	QueryAffected(context.Context, *QueryAffectedParameters) (*VulnerabilityList, error)
	// Query vulnerabilities (batched) for given package versions and commits.
	// This currently allows a maximum of 1000 package versions to be included in
	// a single query.
	QueryAffectedBatch(context.Context, *QueryAffectedBatchParameters) (*BatchVulnerabilityList, error)
	// Determine the version of the provided hash values.
	DetermineVersion(context.Context, *DetermineVersionParameters) (*VersionMatchList, error)
	// Get import findings per source.
	ImportFindings(context.Context, *ImportFindingsParameters) (*ImportFindingList, error)
	mustEmbedUnimplementedOSVServer()
}

// UnimplementedOSVServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOSVServer struct{}

func (UnimplementedOSVServer) GetVulnById(context.Context, *GetVulnByIdParameters) (*osvschema.Vulnerability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnById not implemented")
}
func (UnimplementedOSVServer) QueryAffected(context.Context, *QueryAffectedParameters) (*VulnerabilityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAffected not implemented")
}
func (UnimplementedOSVServer) QueryAffectedBatch(context.Context, *QueryAffectedBatchParameters) (*BatchVulnerabilityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAffectedBatch not implemented")
}
func (UnimplementedOSVServer) DetermineVersion(context.Context, *DetermineVersionParameters) (*VersionMatchList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetermineVersion not implemented")
}
func (UnimplementedOSVServer) ImportFindings(context.Context, *ImportFindingsParameters) (*ImportFindingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFindings not implemented")
}
func (UnimplementedOSVServer) mustEmbedUnimplementedOSVServer() {}
func (UnimplementedOSVServer) testEmbeddedByValue()             {}

// UnsafeOSVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSVServer will
// result in compilation errors.
type UnsafeOSVServer interface {
	mustEmbedUnimplementedOSVServer()
}

func RegisterOSVServer(s grpc.ServiceRegistrar, srv OSVServer) {
	// If the following call pancis, it indicates UnimplementedOSVServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OSV_ServiceDesc, srv)
}

func _OSV_GetVulnById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVulnByIdParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSVServer).GetVulnById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSV_GetVulnById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSVServer).GetVulnById(ctx, req.(*GetVulnByIdParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSV_QueryAffected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAffectedParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSVServer).QueryAffected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSV_QueryAffected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSVServer).QueryAffected(ctx, req.(*QueryAffectedParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSV_QueryAffectedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAffectedBatchParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSVServer).QueryAffectedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSV_QueryAffectedBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSVServer).QueryAffectedBatch(ctx, req.(*QueryAffectedBatchParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSV_DetermineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetermineVersionParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSVServer).DetermineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSV_DetermineVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSVServer).DetermineVersion(ctx, req.(*DetermineVersionParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSV_ImportFindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFindingsParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSVServer).ImportFindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSV_ImportFindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSVServer).ImportFindings(ctx, req.(*ImportFindingsParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// OSV_ServiceDesc is the grpc.ServiceDesc for OSV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "osv.v1.OSV",
	HandlerType: (*OSVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVulnById",
			Handler:    _OSV_GetVulnById_Handler,
		},
		{
			MethodName: "QueryAffected",
			Handler:    _OSV_QueryAffected_Handler,
		},
		{
			MethodName: "QueryAffectedBatch",
			Handler:    _OSV_QueryAffectedBatch_Handler,
		},
		{
			MethodName: "DetermineVersion",
			Handler:    _OSV_DetermineVersion_Handler,
		},
		{
			MethodName: "ImportFindings",
			Handler:    _OSV_ImportFindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osv_service_v1.proto",
}
