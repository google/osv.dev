# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO(michaelkedar): This is intentionally separate from staging.yaml
# to not break existing deployment process as new one is implemented
# eventually, they can probably be combined

steps:
- name: gcr.io/cloud-builders/git
  args: ['submodule', 'update', '--init', '--recursive']
  id: 'setup'

# Poll currently-running Cloud Builds until this is the earliest-started build from this trigger/tag.
# This is to avoid potential misordering of docker images and staging deployments
# in the case when multiple commits to master occur close to one another.
- name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
  - '-c'
  - |
    read current_build <<< $(gcloud builds list --filter=tags="build-and-stage" --format="value(id)" --sort-by=create_time --ongoing)
    if [[ -z "${current_build}" ]]; then
      echo "Could not find any matching builds."
      exit 1
    fi
    while [[ "${current_build}" != "${BUILD_ID}" ]]; do
      echo "Waiting for build ${current_build}"
      sleep 30
      read current_build <<< $(gcloud builds list --filter=tags="build-and-stage" --format="value(id)" --sort-by=create_time  --ongoing)
      if [[ -z "${current_build}" ]]; then
        echo "Could not find any matching builds."
        exit 1
      fi
    done
    echo "Finished waiting for other builds."
  id: 'cloud-build-queue'
  waitFor: ['-']

# Docker Image creation and tagging
# Build/push worker-base image if there's an update.
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker pull gcr.io/oss-vdb/worker-base:latest || exit 0']
  id: 'pull-worker-base'
  waitFor: ['setup']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/oss-vdb/worker-base:latest', '-t', 'gcr.io/oss-vdb/worker-base:$COMMIT_SHA', '-f', 'docker/worker-base/Dockerfile', '--cache-from', 'gcr.io/oss-vdb/worker-base:latest', '--pull', '.']
  id: 'build-worker-base'
  waitFor: ['pull-worker-base']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/worker-base']
  waitFor: ['build-worker-base', 'cloud-build-queue']

# Build/push core worker/importer/exporter images.
- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/oss-vdb/worker:latest', '-t', 'gcr.io/oss-vdb/worker:$COMMIT_SHA', '-f', 'docker/worker/Dockerfile', '.']
  id: 'build-worker'
  waitFor: ['build-worker-base']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/worker']
  waitFor: ['build-worker', 'cloud-build-queue']

- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/oss-vdb/importer:latest', '-t', 'gcr.io/oss-vdb/importer:$COMMIT_SHA', '.']
  dir: 'docker/importer'
  id: 'build-importer'
  waitFor: ['build-worker']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/importer']
  waitFor: ['build-importer', 'cloud-build-queue']

- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/oss-vdb/exporter:latest', '-t', 'gcr.io/oss-vdb/exporter:$COMMIT_SHA', '.']
  dir: 'docker/exporter'
  id: 'build-exporter'
  waitFor: ['build-worker']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/exporter']
  waitFor: ['build-exporter', 'cloud-build-queue']

# Build/push vulnfeeds images
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker pull gcr.io/oss-vdb/alpine-cve-convert:latest || exit 0']
  id: 'pull-alpine-cve-convert'
  waitFor: ['setup']
- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/oss-vdb/alpine-cve-convert:latest', '-t', 'gcr.io/oss-vdb/alpine-cve-convert:$COMMIT_SHA', '-f', 'cmd/alpine/Dockerfile', '--cache-from', 'gcr.io/oss-vdb/alpine-cve-convert:latest', '--pull', '.']
  dir: 'vulnfeeds'
  id: 'build-alpine-cve-convert'
  waitFor: ['pull-alpine-cve-convert']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/alpine-cve-convert']
  waitFor: ['build-alpine-cve-convert', 'cloud-build-queue']

- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker pull gcr.io/oss-vdb/combine-to-osv:latest || exit 0']
  id: 'pull-combine-to-osv'
  waitFor: ['setup']
- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/oss-vdb/combine-to-osv:latest', '-t', 'gcr.io/oss-vdb/combine-to-osv:$COMMIT_SHA', '-f', 'cmd/alpine/Dockerfile', '--cache-from', 'gcr.io/oss-vdb/combine-to-osv:latest', '--pull', '.']
  dir: 'vulnfeeds'
  id: 'build-combine-to-osv'
  waitFor: ['pull-combine-to-osv']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/combine-to-osv']
  waitFor: ['build-combine-to-osv', 'cloud-build-queue']

# Build/push debian converter image
- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/oss-vdb/debian-convert:latest', '-t', 'gcr.io/oss-vdb/debian-convert:$COMMIT_SHA', '.']
  dir: 'vulnfeeds/tools/debian'
  id: 'build-debian-convert'
  waitFor: ['setup']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/debian-convert']
  waitFor: ['build-debian-convert', 'cloud-build-queue']

# Build/push api backend
# TODO(michaelkedar): This is also done in staging.yaml. They should end up pushing identical images.
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/oss-vdb/osv-server:latest', '-t', 'gcr.io/oss-vdb/osv-server:$COMMIT_SHA', '-f', 'gcp/api/Dockerfile', '.']
  id: 'build-osv-server'
  waitFor: ['setup']
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/osv-server']
  waitFor: ['build-osv-server', 'cloud-build-queue']

# Build/push Debian copyright mirror image
- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/oss-vdb/debian-copyright-mirror:latest', '-t', 'gcr.io/oss-vdb/debian-copyright-mirror:$COMMIT_SHA', '.']
  dir: 'vulnfeeds/cmd/debian-copyright-mirror'
  id: 'build-debian-copyright-mirror'
  waitFor: ['setup']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/debian-copyright-mirror']
  waitFor: ['build-debian-copyright-mirror', 'cloud-build-queue']

# Build/push CPE repo map generating image
- name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'gcr.io/oss-vdb/cpe-repo-gen:latest', '-t', 'gcr.io/oss-vdb/cpe-repo-gen:$COMMIT_SHA', '-f', 'cmd/cperepos/Dockerfile','.']
  dir: 'vulnfeeds'
  id: 'build-cpe-repo-gen'
  waitFor: ['setup']
- name: gcr.io/cloud-builders/docker
  args: ['push', '--all-tags', 'gcr.io/oss-vdb/cpe-repo-gen']
  waitFor: ['build-cpe-repo-gen', 'cloud-build-queue']

# Apply Terraform config to staging environment
# TODO(michaelkedar): regenerate the api protobufs?
- name: gcr.io/oss-vdb/terraform
  args: ['init', '-no-color']
  dir:  deployment/terraform/environments/oss-vdb-test
# no waitFor means wait for every previous step to complete
- name: gcr.io/oss-vdb/terraform
  args: ['apply', '-no-color', '-auto-approve']
  dir:  deployment/terraform/environments/oss-vdb-test

# Deploy App Engine for staging environment
- name: 'gcr.io/oss-vdb/deployment'
  args: ['bash', '-ex', 'gcp/appengine/deploy.sh', 'oss-vdb-test', 'deployment/gae/oss-vdb-test', 'app.yaml']

# Cloud Deploy
# GKE Workers
- name: 'gcr.io/cloud-builders/gcloud'
  args: ['deploy', 'releases', 'create', 'osv-$SHORT_SHA', '--project=oss-vdb', '--region=us-central1',
    '--delivery-pipeline=gke-workers', '--images',
    "worker=gcr.io/oss-vdb/worker:$COMMIT_SHA,\
     importer=gcr.io/oss-vdb/importer:$COMMIT_SHA,\
     exporter=gcr.io/oss-vdb/exporter:$COMMIT_SHA,\
     debian-convert=gcr.io/oss-vdb/debian-convert:$COMMIT_SHA,\
     combine-to-osv=gcr.io/oss-vdb/combine-to-osv:$COMMIT_SHA,\
     alpine-cve-convert=gcr.io/oss-vdb/alpine-cve-convert:$COMMIT_SHA, \
     debian-copyright-mirror=gcr.io/oss-vdb/debian-copyright-mirror:$COMMIT_SHA
     cpe-repo-gen=gcr.io/oss-vdb/cpe-repo-gen:$COMMIT_SHA"
  ]
  dir: deployment/clouddeploy/gke-workers

# API Backend
- name: 'gcr.io/cloud-builders/gcloud'
  args: ['deploy', 'releases', 'create', 'osv-$SHORT_SHA', '--project=oss-vdb', '--region=us-central1',
    '--delivery-pipeline=osv-api', '--images',
    "osv-server=gcr.io/oss-vdb/osv-server:$COMMIT_SHA"
  ]
  dir: deployment/clouddeploy/osv-api

timeout: 7200s
# Also set in Cloud Build:
serviceAccount: 'projects/oss-vdb/serviceAccounts/deployment@oss-vdb.iam.gserviceaccount.com'
logsBucket: gs://oss-vdb-tf/apply-logs
options:
  machineType: N1_HIGHCPU_8

tags: ['build-and-stage']

images:
- 'gcr.io/oss-vdb/worker-base:$COMMIT_SHA'
- 'gcr.io/oss-vdb/worker:$COMMIT_SHA'
- 'gcr.io/oss-vdb/importer:$COMMIT_SHA'
- 'gcr.io/oss-vdb/exporter:$COMMIT_SHA'
- 'gcr.io/oss-vdb/alpine-cve-convert:$COMMIT_SHA'
- 'gcr.io/oss-vdb/combine-to-osv:$COMMIT_SHA'
- 'gcr.io/oss-vdb/debian-convert:$COMMIT_SHA'
- 'gcr.io/oss-vdb/osv-server:$COMMIT_SHA'
- 'gcr.io/oss-vdb/debian-copyright-mirror:$COMMIT_SHA'
- 'gcr.io/oss-vdb/cpe-repo-gen:$COMMIT_SHA'
