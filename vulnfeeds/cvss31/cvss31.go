// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.
//
// Generated with:
// go-jsonschema -p cvss31 \
//	--resolve-extension json \
//  --capitalization CVSS \
//  --capitalization CIA \
//  cvss-v3.1.json

package cvss31

import (
	"encoding/json"
	"fmt"
	"reflect"
)

type AttackComplexityType string

const AttackComplexityTypeHIGH AttackComplexityType = "HIGH"
const AttackComplexityTypeLOW AttackComplexityType = "LOW"

type AttackVectorType string

const AttackVectorTypeADJACENTNETWORK AttackVectorType = "ADJACENT_NETWORK"
const AttackVectorTypeLOCAL AttackVectorType = "LOCAL"
const AttackVectorTypeNETWORK AttackVectorType = "NETWORK"
const AttackVectorTypePHYSICAL AttackVectorType = "PHYSICAL"

type CIARequirementType string

const CIARequirementTypeHIGH CIARequirementType = "HIGH"
const CIARequirementTypeLOW CIARequirementType = "LOW"
const CIARequirementTypeMEDIUM CIARequirementType = "MEDIUM"
const CIARequirementTypeNOTDEFINED CIARequirementType = "NOT_DEFINED"

type CIAType string

const CIATypeHIGH CIAType = "HIGH"
const CIATypeLOW CIAType = "LOW"
const CIATypeNONE CIAType = "NONE"

type ConfidenceType string

const ConfidenceTypeCONFIRMED ConfidenceType = "CONFIRMED"
const ConfidenceTypeNOTDEFINED ConfidenceType = "NOT_DEFINED"
const ConfidenceTypeREASONABLE ConfidenceType = "REASONABLE"
const ConfidenceTypeUNKNOWN ConfidenceType = "UNKNOWN"

type CVSSV31 struct {
	// AttackComplexity corresponds to the JSON schema field "attackComplexity".
	AttackComplexity *AttackComplexityType `json:"attackComplexity,omitempty" yaml:"attackComplexity,omitempty" mapstructure:"attackComplexity,omitempty"`

	// AttackVector corresponds to the JSON schema field "attackVector".
	AttackVector *AttackVectorType `json:"attackVector,omitempty" yaml:"attackVector,omitempty" mapstructure:"attackVector,omitempty"`

	// AvailabilityImpact corresponds to the JSON schema field "availabilityImpact".
	AvailabilityImpact *CIAType `json:"availabilityImpact,omitempty" yaml:"availabilityImpact,omitempty" mapstructure:"availabilityImpact,omitempty"`

	// AvailabilityRequirement corresponds to the JSON schema field
	// "availabilityRequirement".
	AvailabilityRequirement *CIARequirementType `json:"availabilityRequirement,omitempty" yaml:"availabilityRequirement,omitempty" mapstructure:"availabilityRequirement,omitempty"`

	// BaseScore corresponds to the JSON schema field "baseScore".
	BaseScore ScoreType `json:"baseScore" yaml:"baseScore" mapstructure:"baseScore"`

	// BaseSeverity corresponds to the JSON schema field "baseSeverity".
	BaseSeverity SeverityType `json:"baseSeverity" yaml:"baseSeverity" mapstructure:"baseSeverity"`

	// ConfidentialityImpact corresponds to the JSON schema field
	// "confidentialityImpact".
	ConfidentialityImpact *CIAType `json:"confidentialityImpact,omitempty" yaml:"confidentialityImpact,omitempty" mapstructure:"confidentialityImpact,omitempty"`

	// ConfidentialityRequirement corresponds to the JSON schema field
	// "confidentialityRequirement".
	ConfidentialityRequirement *CIARequirementType `json:"confidentialityRequirement,omitempty" yaml:"confidentialityRequirement,omitempty" mapstructure:"confidentialityRequirement,omitempty"`

	// EnvironmentalScore corresponds to the JSON schema field "environmentalScore".
	EnvironmentalScore *ScoreType `json:"environmentalScore,omitempty" yaml:"environmentalScore,omitempty" mapstructure:"environmentalScore,omitempty"`

	// EnvironmentalSeverity corresponds to the JSON schema field
	// "environmentalSeverity".
	EnvironmentalSeverity *SeverityType `json:"environmentalSeverity,omitempty" yaml:"environmentalSeverity,omitempty" mapstructure:"environmentalSeverity,omitempty"`

	// ExploitCodeMaturity corresponds to the JSON schema field "exploitCodeMaturity".
	ExploitCodeMaturity *ExploitCodeMaturityType `json:"exploitCodeMaturity,omitempty" yaml:"exploitCodeMaturity,omitempty" mapstructure:"exploitCodeMaturity,omitempty"`

	// IntegrityImpact corresponds to the JSON schema field "integrityImpact".
	IntegrityImpact *CIAType `json:"integrityImpact,omitempty" yaml:"integrityImpact,omitempty" mapstructure:"integrityImpact,omitempty"`

	// IntegrityRequirement corresponds to the JSON schema field
	// "integrityRequirement".
	IntegrityRequirement *CIARequirementType `json:"integrityRequirement,omitempty" yaml:"integrityRequirement,omitempty" mapstructure:"integrityRequirement,omitempty"`

	// ModifiedAttackComplexity corresponds to the JSON schema field
	// "modifiedAttackComplexity".
	ModifiedAttackComplexity *ModifiedAttackComplexityType `json:"modifiedAttackComplexity,omitempty" yaml:"modifiedAttackComplexity,omitempty" mapstructure:"modifiedAttackComplexity,omitempty"`

	// ModifiedAttackVector corresponds to the JSON schema field
	// "modifiedAttackVector".
	ModifiedAttackVector *ModifiedAttackVectorType `json:"modifiedAttackVector,omitempty" yaml:"modifiedAttackVector,omitempty" mapstructure:"modifiedAttackVector,omitempty"`

	// ModifiedAvailabilityImpact corresponds to the JSON schema field
	// "modifiedAvailabilityImpact".
	ModifiedAvailabilityImpact *ModifiedCIAType `json:"modifiedAvailabilityImpact,omitempty" yaml:"modifiedAvailabilityImpact,omitempty" mapstructure:"modifiedAvailabilityImpact,omitempty"`

	// ModifiedConfidentialityImpact corresponds to the JSON schema field
	// "modifiedConfidentialityImpact".
	ModifiedConfidentialityImpact *ModifiedCIAType `json:"modifiedConfidentialityImpact,omitempty" yaml:"modifiedConfidentialityImpact,omitempty" mapstructure:"modifiedConfidentialityImpact,omitempty"`

	// ModifiedIntegrityImpact corresponds to the JSON schema field
	// "modifiedIntegrityImpact".
	ModifiedIntegrityImpact *ModifiedCIAType `json:"modifiedIntegrityImpact,omitempty" yaml:"modifiedIntegrityImpact,omitempty" mapstructure:"modifiedIntegrityImpact,omitempty"`

	// ModifiedPrivilegesRequired corresponds to the JSON schema field
	// "modifiedPrivilegesRequired".
	ModifiedPrivilegesRequired *ModifiedPrivilegesRequiredType `json:"modifiedPrivilegesRequired,omitempty" yaml:"modifiedPrivilegesRequired,omitempty" mapstructure:"modifiedPrivilegesRequired,omitempty"`

	// ModifiedScope corresponds to the JSON schema field "modifiedScope".
	ModifiedScope *ModifiedScopeType `json:"modifiedScope,omitempty" yaml:"modifiedScope,omitempty" mapstructure:"modifiedScope,omitempty"`

	// ModifiedUserInteraction corresponds to the JSON schema field
	// "modifiedUserInteraction".
	ModifiedUserInteraction *ModifiedUserInteractionType `json:"modifiedUserInteraction,omitempty" yaml:"modifiedUserInteraction,omitempty" mapstructure:"modifiedUserInteraction,omitempty"`

	// PrivilegesRequired corresponds to the JSON schema field "privilegesRequired".
	PrivilegesRequired *PrivilegesRequiredType `json:"privilegesRequired,omitempty" yaml:"privilegesRequired,omitempty" mapstructure:"privilegesRequired,omitempty"`

	// RemediationLevel corresponds to the JSON schema field "remediationLevel".
	RemediationLevel *RemediationLevelType `json:"remediationLevel,omitempty" yaml:"remediationLevel,omitempty" mapstructure:"remediationLevel,omitempty"`

	// ReportConfidence corresponds to the JSON schema field "reportConfidence".
	ReportConfidence *ConfidenceType `json:"reportConfidence,omitempty" yaml:"reportConfidence,omitempty" mapstructure:"reportConfidence,omitempty"`

	// Scope corresponds to the JSON schema field "scope".
	Scope *ScopeType `json:"scope,omitempty" yaml:"scope,omitempty" mapstructure:"scope,omitempty"`

	// TemporalScore corresponds to the JSON schema field "temporalScore".
	TemporalScore *ScoreType `json:"temporalScore,omitempty" yaml:"temporalScore,omitempty" mapstructure:"temporalScore,omitempty"`

	// TemporalSeverity corresponds to the JSON schema field "temporalSeverity".
	TemporalSeverity *SeverityType `json:"temporalSeverity,omitempty" yaml:"temporalSeverity,omitempty" mapstructure:"temporalSeverity,omitempty"`

	// UserInteraction corresponds to the JSON schema field "userInteraction".
	UserInteraction *UserInteractionType `json:"userInteraction,omitempty" yaml:"userInteraction,omitempty" mapstructure:"userInteraction,omitempty"`

	// VectorString corresponds to the JSON schema field "vectorString".
	VectorString string `json:"vectorString" yaml:"vectorString" mapstructure:"vectorString"`

	// CVSS Version
	Version CVSSV31Version `json:"version" yaml:"version" mapstructure:"version"`
}

type CVSSV31Version string

const CVSSV31VersionA31 CVSSV31Version = "3.1"

type ExploitCodeMaturityType string

const ExploitCodeMaturityTypeFUNCTIONAL ExploitCodeMaturityType = "FUNCTIONAL"
const ExploitCodeMaturityTypeHIGH ExploitCodeMaturityType = "HIGH"
const ExploitCodeMaturityTypeNOTDEFINED ExploitCodeMaturityType = "NOT_DEFINED"
const ExploitCodeMaturityTypePROOFOFCONCEPT ExploitCodeMaturityType = "PROOF_OF_CONCEPT"
const ExploitCodeMaturityTypeUNPROVEN ExploitCodeMaturityType = "UNPROVEN"

type ModifiedAttackComplexityType string

const ModifiedAttackComplexityTypeHIGH ModifiedAttackComplexityType = "HIGH"
const ModifiedAttackComplexityTypeLOW ModifiedAttackComplexityType = "LOW"
const ModifiedAttackComplexityTypeNOTDEFINED ModifiedAttackComplexityType = "NOT_DEFINED"

type ModifiedAttackVectorType string

const ModifiedAttackVectorTypeADJACENTNETWORK ModifiedAttackVectorType = "ADJACENT_NETWORK"
const ModifiedAttackVectorTypeLOCAL ModifiedAttackVectorType = "LOCAL"
const ModifiedAttackVectorTypeNETWORK ModifiedAttackVectorType = "NETWORK"
const ModifiedAttackVectorTypeNOTDEFINED ModifiedAttackVectorType = "NOT_DEFINED"
const ModifiedAttackVectorTypePHYSICAL ModifiedAttackVectorType = "PHYSICAL"

type ModifiedCIAType string

const ModifiedCIATypeHIGH ModifiedCIAType = "HIGH"
const ModifiedCIATypeLOW ModifiedCIAType = "LOW"
const ModifiedCIATypeNONE ModifiedCIAType = "NONE"
const ModifiedCIATypeNOTDEFINED ModifiedCIAType = "NOT_DEFINED"

type ModifiedPrivilegesRequiredType string

const ModifiedPrivilegesRequiredTypeHIGH ModifiedPrivilegesRequiredType = "HIGH"
const ModifiedPrivilegesRequiredTypeLOW ModifiedPrivilegesRequiredType = "LOW"
const ModifiedPrivilegesRequiredTypeNONE ModifiedPrivilegesRequiredType = "NONE"
const ModifiedPrivilegesRequiredTypeNOTDEFINED ModifiedPrivilegesRequiredType = "NOT_DEFINED"

type ModifiedScopeType string

const ModifiedScopeTypeCHANGED ModifiedScopeType = "CHANGED"
const ModifiedScopeTypeNOTDEFINED ModifiedScopeType = "NOT_DEFINED"
const ModifiedScopeTypeUNCHANGED ModifiedScopeType = "UNCHANGED"

type ModifiedUserInteractionType string

const ModifiedUserInteractionTypeNONE ModifiedUserInteractionType = "NONE"
const ModifiedUserInteractionTypeNOTDEFINED ModifiedUserInteractionType = "NOT_DEFINED"
const ModifiedUserInteractionTypeREQUIRED ModifiedUserInteractionType = "REQUIRED"

type PrivilegesRequiredType string

const PrivilegesRequiredTypeHIGH PrivilegesRequiredType = "HIGH"
const PrivilegesRequiredTypeLOW PrivilegesRequiredType = "LOW"
const PrivilegesRequiredTypeNONE PrivilegesRequiredType = "NONE"

type RemediationLevelType string

const RemediationLevelTypeNOTDEFINED RemediationLevelType = "NOT_DEFINED"
const RemediationLevelTypeOFFICIALFIX RemediationLevelType = "OFFICIAL_FIX"
const RemediationLevelTypeTEMPORARYFIX RemediationLevelType = "TEMPORARY_FIX"
const RemediationLevelTypeUNAVAILABLE RemediationLevelType = "UNAVAILABLE"
const RemediationLevelTypeWORKAROUND RemediationLevelType = "WORKAROUND"

type ScopeType string

const ScopeTypeCHANGED ScopeType = "CHANGED"
const ScopeTypeUNCHANGED ScopeType = "UNCHANGED"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExploitCodeMaturityType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ExploitCodeMaturityType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ExploitCodeMaturityType, v)
	}
	*j = ExploitCodeMaturityType(v)
	return nil
}

var enumValues_ModifiedScopeType = []interface{}{
	"UNCHANGED",
	"CHANGED",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ModifiedPrivilegesRequiredType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ModifiedPrivilegesRequiredType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ModifiedPrivilegesRequiredType, v)
	}
	*j = ModifiedPrivilegesRequiredType(v)
	return nil
}

var enumValues_ModifiedUserInteractionType = []interface{}{
	"NONE",
	"REQUIRED",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ModifiedUserInteractionType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ModifiedUserInteractionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ModifiedUserInteractionType, v)
	}
	*j = ModifiedUserInteractionType(v)
	return nil
}

var enumValues_ModifiedPrivilegesRequiredType = []interface{}{
	"HIGH",
	"LOW",
	"NONE",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AttackVectorType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AttackVectorType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AttackVectorType, v)
	}
	*j = AttackVectorType(v)
	return nil
}

var enumValues_CIARequirementType = []interface{}{
	"LOW",
	"MEDIUM",
	"HIGH",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ModifiedCIAType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ModifiedCIAType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ModifiedCIAType, v)
	}
	*j = ModifiedCIAType(v)
	return nil
}

var enumValues_PrivilegesRequiredType = []interface{}{
	"HIGH",
	"LOW",
	"NONE",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PrivilegesRequiredType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PrivilegesRequiredType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PrivilegesRequiredType, v)
	}
	*j = PrivilegesRequiredType(v)
	return nil
}

var enumValues_ModifiedCIAType = []interface{}{
	"NONE",
	"LOW",
	"HIGH",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CIARequirementType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CIARequirementType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CIARequirementType, v)
	}
	*j = CIARequirementType(v)
	return nil
}

var enumValues_CIAType = []interface{}{
	"NONE",
	"LOW",
	"HIGH",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CIAType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CIAType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CIAType, v)
	}
	*j = CIAType(v)
	return nil
}

var enumValues_RemediationLevelType = []interface{}{
	"OFFICIAL_FIX",
	"TEMPORARY_FIX",
	"WORKAROUND",
	"UNAVAILABLE",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RemediationLevelType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RemediationLevelType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RemediationLevelType, v)
	}
	*j = RemediationLevelType(v)
	return nil
}

var enumValues_ConfidenceType = []interface{}{
	"UNKNOWN",
	"REASONABLE",
	"CONFIRMED",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfidenceType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConfidenceType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConfidenceType, v)
	}
	*j = ConfidenceType(v)
	return nil
}

var enumValues_ExploitCodeMaturityType = []interface{}{
	"UNPROVEN",
	"PROOF_OF_CONCEPT",
	"FUNCTIONAL",
	"HIGH",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ModifiedAttackVectorType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ModifiedAttackVectorType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ModifiedAttackVectorType, v)
	}
	*j = ModifiedAttackVectorType(v)
	return nil
}

var enumValues_ModifiedAttackVectorType = []interface{}{
	"NETWORK",
	"ADJACENT_NETWORK",
	"LOCAL",
	"PHYSICAL",
	"NOT_DEFINED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ModifiedScopeType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ModifiedScopeType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ModifiedScopeType, v)
	}
	*j = ModifiedScopeType(v)
	return nil
}

var enumValues_ScopeType = []interface{}{
	"UNCHANGED",
	"CHANGED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ScopeType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ScopeType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ScopeType, v)
	}
	*j = ScopeType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ModifiedAttackComplexityType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ModifiedAttackComplexityType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ModifiedAttackComplexityType, v)
	}
	*j = ModifiedAttackComplexityType(v)
	return nil
}

var enumValues_ModifiedAttackComplexityType = []interface{}{
	"HIGH",
	"LOW",
	"NOT_DEFINED",
}

type ScoreType float64

type SeverityType string

var enumValues_SeverityType = []interface{}{
	"NONE",
	"LOW",
	"MEDIUM",
	"HIGH",
	"CRITICAL",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SeverityType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SeverityType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SeverityType, v)
	}
	*j = SeverityType(v)
	return nil
}

const SeverityTypeNONE SeverityType = "NONE"
const SeverityTypeLOW SeverityType = "LOW"
const SeverityTypeMEDIUM SeverityType = "MEDIUM"
const SeverityTypeHIGH SeverityType = "HIGH"
const SeverityTypeCRITICAL SeverityType = "CRITICAL"

type UserInteractionType string

var enumValues_UserInteractionType = []interface{}{
	"NONE",
	"REQUIRED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UserInteractionType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_UserInteractionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_UserInteractionType, v)
	}
	*j = UserInteractionType(v)
	return nil
}

const UserInteractionTypeNONE UserInteractionType = "NONE"
const UserInteractionTypeREQUIRED UserInteractionType = "REQUIRED"

var enumValues_AttackVectorType = []interface{}{
	"NETWORK",
	"ADJACENT_NETWORK",
	"LOCAL",
	"PHYSICAL",
}
var enumValues_CvssV31Version = []interface{}{
	"3.1",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CVSSV31Version) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CvssV31Version {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CvssV31Version, v)
	}
	*j = CVSSV31Version(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AttackComplexityType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AttackComplexityType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AttackComplexityType, v)
	}
	*j = AttackComplexityType(v)
	return nil
}

var enumValues_AttackComplexityType = []interface{}{
	"HIGH",
	"LOW",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CVSSV31) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["baseScore"]; !ok || v == nil {
		return fmt.Errorf("field baseScore in CvssV31: required")
	}
	if v, ok := raw["baseSeverity"]; !ok || v == nil {
		return fmt.Errorf("field baseSeverity in CvssV31: required")
	}
	if v, ok := raw["vectorString"]; !ok || v == nil {
		return fmt.Errorf("field vectorString in CvssV31: required")
	}
	if v, ok := raw["version"]; !ok || v == nil {
		return fmt.Errorf("field version in CvssV31: required")
	}
	type Plain CVSSV31
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CVSSV31(plain)
	return nil
}
