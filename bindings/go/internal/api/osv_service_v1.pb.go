// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.5
// source: osv_service_v1.proto

package api

import (
	osvschema "github.com/ossf/osv-schema/bindings/go/osvschema"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileHash_HashType int32

const (
	FileHash_MD5 FileHash_HashType = 0
)

// Enum value maps for FileHash_HashType.
var (
	FileHash_HashType_name = map[int32]string{
		0: "MD5",
	}
	FileHash_HashType_value = map[string]int32{
		"MD5": 0,
	}
)

func (x FileHash_HashType) Enum() *FileHash_HashType {
	p := new(FileHash_HashType)
	*p = x
	return p
}

func (x FileHash_HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileHash_HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_osv_service_v1_proto_enumTypes[0].Descriptor()
}

func (FileHash_HashType) Type() protoreflect.EnumType {
	return &file_osv_service_v1_proto_enumTypes[0]
}

func (x FileHash_HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileHash_HashType.Descriptor instead.
func (FileHash_HashType) EnumDescriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{10, 0}
}

type VersionRepositoryInformation_RepoType int32

const (
	VersionRepositoryInformation_UNSPECIFIED VersionRepositoryInformation_RepoType = 0
	VersionRepositoryInformation_GIT         VersionRepositoryInformation_RepoType = 1
)

// Enum value maps for VersionRepositoryInformation_RepoType.
var (
	VersionRepositoryInformation_RepoType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "GIT",
	}
	VersionRepositoryInformation_RepoType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"GIT":         1,
	}
)

func (x VersionRepositoryInformation_RepoType) Enum() *VersionRepositoryInformation_RepoType {
	p := new(VersionRepositoryInformation_RepoType)
	*p = x
	return p
}

func (x VersionRepositoryInformation_RepoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionRepositoryInformation_RepoType) Descriptor() protoreflect.EnumDescriptor {
	return file_osv_service_v1_proto_enumTypes[1].Descriptor()
}

func (VersionRepositoryInformation_RepoType) Type() protoreflect.EnumType {
	return &file_osv_service_v1_proto_enumTypes[1]
}

func (x VersionRepositoryInformation_RepoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionRepositoryInformation_RepoType.Descriptor instead.
func (VersionRepositoryInformation_RepoType) EnumDescriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{14, 0}
}

// A list of Vulnerability entries.
type VulnerabilityList struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Vulns         []*osvschema.Vulnerability `protobuf:"bytes,1,rep,name=vulns,proto3" json:"vulns,omitempty"`
	NextPageToken string                     `protobuf:"bytes,2,opt,name=next_page_token,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VulnerabilityList) Reset() {
	*x = VulnerabilityList{}
	mi := &file_osv_service_v1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityList) ProtoMessage() {}

func (x *VulnerabilityList) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityList.ProtoReflect.Descriptor instead.
func (*VulnerabilityList) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{0}
}

func (x *VulnerabilityList) GetVulns() []*osvschema.Vulnerability {
	if x != nil {
		return x.Vulns
	}
	return nil
}

func (x *VulnerabilityList) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Batched lists of Vulnerability entries.
type BatchVulnerabilityList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*VulnerabilityList   `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchVulnerabilityList) Reset() {
	*x = BatchVulnerabilityList{}
	mi := &file_osv_service_v1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchVulnerabilityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchVulnerabilityList) ProtoMessage() {}

func (x *BatchVulnerabilityList) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchVulnerabilityList.ProtoReflect.Descriptor instead.
func (*BatchVulnerabilityList) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{1}
}

func (x *BatchVulnerabilityList) GetResults() []*VulnerabilityList {
	if x != nil {
		return x.Results
	}
	return nil
}

// Query format.
type Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Param:
	//
	//	*Query_Commit
	//	*Query_Version
	Param isQuery_Param `protobuf_oneof:"param"`
	// The package to query against. When a `commit` hash is given, this is
	// optional.
	Package       *osvschema.Package `protobuf:"bytes,4,opt,name=package,proto3" json:"package,omitempty"`
	PageToken     string             `protobuf:"bytes,5,opt,name=page_token,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_osv_service_v1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{2}
}

func (x *Query) GetParam() isQuery_Param {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Query) GetCommit() string {
	if x != nil {
		if x, ok := x.Param.(*Query_Commit); ok {
			return x.Commit
		}
	}
	return ""
}

func (x *Query) GetVersion() string {
	if x != nil {
		if x, ok := x.Param.(*Query_Version); ok {
			return x.Version
		}
	}
	return ""
}

func (x *Query) GetPackage() *osvschema.Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *Query) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isQuery_Param interface {
	isQuery_Param()
}

type Query_Commit struct {
	// The commit hash to query for. If specified, `version` should not be set.
	Commit string `protobuf:"bytes,1,opt,name=commit,proto3,oneof"`
}

type Query_Version struct {
	// The version string to query for. A fuzzy match is done against upstream
	// versions. If specified, `commit` should not be set.
	Version string `protobuf:"bytes,2,opt,name=version,proto3,oneof"`
}

func (*Query_Commit) isQuery_Param() {}

func (*Query_Version) isQuery_Param() {}

// Batch query format.
type BatchQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The queries that form this batch query.
	Queries       []*Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchQuery) Reset() {
	*x = BatchQuery{}
	mi := &file_osv_service_v1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQuery) ProtoMessage() {}

func (x *BatchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQuery.ProtoReflect.Descriptor instead.
func (*BatchQuery) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{3}
}

func (x *BatchQuery) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

// Parameters for GetBugById.
type GetVulnByIdParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVulnByIdParameters) Reset() {
	*x = GetVulnByIdParameters{}
	mi := &file_osv_service_v1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVulnByIdParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVulnByIdParameters) ProtoMessage() {}

func (x *GetVulnByIdParameters) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVulnByIdParameters.ProtoReflect.Descriptor instead.
func (*GetVulnByIdParameters) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{4}
}

func (x *GetVulnByIdParameters) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Parameters for QueryAffected.
type QueryAffectedParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *Query                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAffectedParameters) Reset() {
	*x = QueryAffectedParameters{}
	mi := &file_osv_service_v1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAffectedParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAffectedParameters) ProtoMessage() {}

func (x *QueryAffectedParameters) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAffectedParameters.ProtoReflect.Descriptor instead.
func (*QueryAffectedParameters) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{5}
}

func (x *QueryAffectedParameters) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

// Parameters for QueryAffectedBatch.
type QueryAffectedBatchParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *BatchQuery            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAffectedBatchParameters) Reset() {
	*x = QueryAffectedBatchParameters{}
	mi := &file_osv_service_v1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAffectedBatchParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAffectedBatchParameters) ProtoMessage() {}

func (x *QueryAffectedBatchParameters) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAffectedBatchParameters.ProtoReflect.Descriptor instead.
func (*QueryAffectedBatchParameters) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{6}
}

func (x *QueryAffectedBatchParameters) GetQuery() *BatchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// Parameters for DetermineVersion.
type DetermineVersionParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *VersionQuery          `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DetermineVersionParameters) Reset() {
	*x = DetermineVersionParameters{}
	mi := &file_osv_service_v1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetermineVersionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetermineVersionParameters) ProtoMessage() {}

func (x *DetermineVersionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetermineVersionParameters.ProtoReflect.Descriptor instead.
func (*DetermineVersionParameters) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{7}
}

func (x *DetermineVersionParameters) GetQuery() *VersionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// Parameters for ImportFindings.
type ImportFindingsParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportFindingsParameters) Reset() {
	*x = ImportFindingsParameters{}
	mi := &file_osv_service_v1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportFindingsParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFindingsParameters) ProtoMessage() {}

func (x *ImportFindingsParameters) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFindingsParameters.ProtoReflect.Descriptor instead.
func (*ImportFindingsParameters) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{8}
}

func (x *ImportFindingsParameters) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// The version query.
type VersionQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the dependency. Can be empty.
	Name          string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileHashes    []*FileHash `protobuf:"bytes,2,rep,name=file_hashes,proto3" json:"file_hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionQuery) Reset() {
	*x = VersionQuery{}
	mi := &file_osv_service_v1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionQuery) ProtoMessage() {}

func (x *VersionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionQuery.ProtoReflect.Descriptor instead.
func (*VersionQuery) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{9}
}

func (x *VersionQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VersionQuery) GetFileHashes() []*FileHash {
	if x != nil {
		return x.FileHashes
	}
	return nil
}

// Information about the files in the repository
// to identify the version.
type FileHash struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The file path inside the repository, relative to the repository root.
	FilePath      string            `protobuf:"bytes,1,opt,name=file_path,proto3" json:"file_path,omitempty"`
	HashType      FileHash_HashType `protobuf:"varint,2,opt,name=hash_type,proto3,enum=osv.v1.FileHash_HashType" json:"hash_type,omitempty"`
	Hash          []byte            `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileHash) Reset() {
	*x = FileHash{}
	mi := &file_osv_service_v1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHash) ProtoMessage() {}

func (x *FileHash) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHash.ProtoReflect.Descriptor instead.
func (*FileHash) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{10}
}

func (x *FileHash) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileHash) GetHashType() FileHash_HashType {
	if x != nil {
		return x.HashType
	}
	return FileHash_MD5
}

func (x *FileHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// Result of DetmineVersion.
type VersionMatchList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Matches       []*VersionMatch        `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionMatchList) Reset() {
	*x = VersionMatchList{}
	mi := &file_osv_service_v1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionMatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionMatchList) ProtoMessage() {}

func (x *VersionMatchList) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionMatchList.ProtoReflect.Descriptor instead.
func (*VersionMatchList) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{11}
}

func (x *VersionMatchList) GetMatches() []*VersionMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

// Result of ImportFindings.
type ImportFindingList struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InvalidRecords []*ImportFinding       `protobuf:"bytes,1,rep,name=invalid_records,proto3" json:"invalid_records,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ImportFindingList) Reset() {
	*x = ImportFindingList{}
	mi := &file_osv_service_v1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportFindingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFindingList) ProtoMessage() {}

func (x *ImportFindingList) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFindingList.ProtoReflect.Descriptor instead.
func (*ImportFindingList) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{12}
}

func (x *ImportFindingList) GetInvalidRecords() []*ImportFinding {
	if x != nil {
		return x.InvalidRecords
	}
	return nil
}

// Match information for the provided VersionQuery.
type VersionMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Score in the interval (0.0, 1.0] with 1.0 being a perfect match.
	Score float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	// Information about the upstream repository.
	RepoInfo *VersionRepositoryInformation `protobuf:"bytes,2,opt,name=repo_info,json=repoInfo,proto3" json:"repo_info,omitempty"`
	// The OSV identifier.
	OsvIdentifier *osvschema.Package `protobuf:"bytes,3,opt,name=osv_identifier,proto3" json:"osv_identifier,omitempty"`
	// CPE 2.3.
	Cpe23 string `protobuf:"bytes,5,opt,name=cpe23,proto3" json:"cpe23,omitempty"`
	// Definite number of files that have matched.
	MinimumFileMatches int64 `protobuf:"varint,6,opt,name=minimum_file_matches,proto3" json:"minimum_file_matches,omitempty"`
	// Estimated number of files that are different.
	EstimatedDiffFiles int64 `protobuf:"varint,7,opt,name=estimated_diff_files,proto3" json:"estimated_diff_files,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *VersionMatch) Reset() {
	*x = VersionMatch{}
	mi := &file_osv_service_v1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionMatch) ProtoMessage() {}

func (x *VersionMatch) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionMatch.ProtoReflect.Descriptor instead.
func (*VersionMatch) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{13}
}

func (x *VersionMatch) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *VersionMatch) GetRepoInfo() *VersionRepositoryInformation {
	if x != nil {
		return x.RepoInfo
	}
	return nil
}

func (x *VersionMatch) GetOsvIdentifier() *osvschema.Package {
	if x != nil {
		return x.OsvIdentifier
	}
	return nil
}

func (x *VersionMatch) GetCpe23() string {
	if x != nil {
		return x.Cpe23
	}
	return ""
}

func (x *VersionMatch) GetMinimumFileMatches() int64 {
	if x != nil {
		return x.MinimumFileMatches
	}
	return 0
}

func (x *VersionMatch) GetEstimatedDiffFiles() int64 {
	if x != nil {
		return x.EstimatedDiffFiles
	}
	return 0
}

type VersionRepositoryInformation struct {
	state protoimpl.MessageState                `protogen:"open.v1"`
	Type  VersionRepositoryInformation_RepoType `protobuf:"varint,1,opt,name=type,proto3,enum=osv.v1.VersionRepositoryInformation_RepoType" json:"type,omitempty"`
	// Source address of the repository.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Commit tag
	Tag string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	// Parsed version from commit tag
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// Commit hash hex.
	Commit        string `protobuf:"bytes,6,opt,name=commit,proto3" json:"commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionRepositoryInformation) Reset() {
	*x = VersionRepositoryInformation{}
	mi := &file_osv_service_v1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRepositoryInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRepositoryInformation) ProtoMessage() {}

func (x *VersionRepositoryInformation) ProtoReflect() protoreflect.Message {
	mi := &file_osv_service_v1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRepositoryInformation.ProtoReflect.Descriptor instead.
func (*VersionRepositoryInformation) Descriptor() ([]byte, []int) {
	return file_osv_service_v1_proto_rawDescGZIP(), []int{14}
}

func (x *VersionRepositoryInformation) GetType() VersionRepositoryInformation_RepoType {
	if x != nil {
		return x.Type
	}
	return VersionRepositoryInformation_UNSPECIFIED
}

func (x *VersionRepositoryInformation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VersionRepositoryInformation) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VersionRepositoryInformation) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionRepositoryInformation) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

var File_osv_service_v1_proto protoreflect.FileDescriptor

const file_osv_service_v1_proto_rawDesc = "" +
	"\n" +
	"\x14osv_service_v1.proto\x12\x06osv.v1\x1a\x13vulnerability.proto\x1a\x13importfinding.proto\x1a\x1cgoogle/api/annotations.proto\"g\n" +
	"\x11VulnerabilityList\x12(\n" +
	"\x05vulns\x18\x01 \x03(\v2\x12.osv.VulnerabilityR\x05vulns\x12(\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\x0fnext_page_token\"M\n" +
	"\x16BatchVulnerabilityList\x123\n" +
	"\aresults\x18\x01 \x03(\v2\x19.osv.v1.VulnerabilityListR\aresults\"\x8e\x01\n" +
	"\x05Query\x12\x18\n" +
	"\x06commit\x18\x01 \x01(\tH\x00R\x06commit\x12\x1a\n" +
	"\aversion\x18\x02 \x01(\tH\x00R\aversion\x12&\n" +
	"\apackage\x18\x04 \x01(\v2\f.osv.PackageR\apackage\x12\x1e\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\n" +
	"page_tokenB\a\n" +
	"\x05param\"5\n" +
	"\n" +
	"BatchQuery\x12'\n" +
	"\aqueries\x18\x01 \x03(\v2\r.osv.v1.QueryR\aqueries\"'\n" +
	"\x15GetVulnByIdParameters\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\">\n" +
	"\x17QueryAffectedParameters\x12#\n" +
	"\x05query\x18\x01 \x01(\v2\r.osv.v1.QueryR\x05query\"H\n" +
	"\x1cQueryAffectedBatchParameters\x12(\n" +
	"\x05query\x18\x01 \x01(\v2\x12.osv.v1.BatchQueryR\x05query\"H\n" +
	"\x1aDetermineVersionParameters\x12*\n" +
	"\x05query\x18\x01 \x01(\v2\x14.osv.v1.VersionQueryR\x05query\"2\n" +
	"\x18ImportFindingsParameters\x12\x16\n" +
	"\x06source\x18\x01 \x01(\tR\x06source\"V\n" +
	"\fVersionQuery\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x122\n" +
	"\vfile_hashes\x18\x02 \x03(\v2\x10.osv.v1.FileHashR\vfile_hashes\"\x8a\x01\n" +
	"\bFileHash\x12\x1c\n" +
	"\tfile_path\x18\x01 \x01(\tR\tfile_path\x127\n" +
	"\thash_type\x18\x02 \x01(\x0e2\x19.osv.v1.FileHash.HashTypeR\thash_type\x12\x12\n" +
	"\x04hash\x18\x03 \x01(\fR\x04hash\"\x13\n" +
	"\bHashType\x12\a\n" +
	"\x03MD5\x10\x00\"B\n" +
	"\x10VersionMatchList\x12.\n" +
	"\amatches\x18\x01 \x03(\v2\x14.osv.v1.VersionMatchR\amatches\"Q\n" +
	"\x11ImportFindingList\x12<\n" +
	"\x0finvalid_records\x18\x01 \x03(\v2\x12.osv.ImportFindingR\x0finvalid_records\"\x9b\x02\n" +
	"\fVersionMatch\x12\x14\n" +
	"\x05score\x18\x01 \x01(\x01R\x05score\x12A\n" +
	"\trepo_info\x18\x02 \x01(\v2$.osv.v1.VersionRepositoryInformationR\brepoInfo\x124\n" +
	"\x0eosv_identifier\x18\x03 \x01(\v2\f.osv.PackageR\x0eosv_identifier\x12\x14\n" +
	"\x05cpe23\x18\x05 \x01(\tR\x05cpe23\x122\n" +
	"\x14minimum_file_matches\x18\x06 \x01(\x03R\x14minimum_file_matches\x122\n" +
	"\x14estimated_diff_files\x18\a \x01(\x03R\x14estimated_diff_files\"\xe5\x01\n" +
	"\x1cVersionRepositoryInformation\x12A\n" +
	"\x04type\x18\x01 \x01(\x0e2-.osv.v1.VersionRepositoryInformation.RepoTypeR\x04type\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x10\n" +
	"\x03tag\x18\x04 \x01(\tR\x03tag\x12\x18\n" +
	"\aversion\x18\x05 \x01(\tR\aversion\x12\x16\n" +
	"\x06commit\x18\x06 \x01(\tR\x06commit\"$\n" +
	"\bRepoType\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\a\n" +
	"\x03GIT\x10\x012\xc5\x04\n" +
	"\x03OSV\x12X\n" +
	"\vGetVulnById\x12\x1d.osv.v1.GetVulnByIdParameters\x1a\x12.osv.Vulnerability\"\x16\x82\xd3\xe4\x93\x02\x10\x12\x0e/v1/vulns/{id}\x12e\n" +
	"\rQueryAffected\x12\x1f.osv.v1.QueryAffectedParameters\x1a\x19.osv.v1.VulnerabilityList\"\x18\x82\xd3\xe4\x93\x02\x12:\x05query\"\t/v1/query\x12y\n" +
	"\x12QueryAffectedBatch\x12$.osv.v1.QueryAffectedBatchParameters\x1a\x1e.osv.v1.BatchVulnerabilityList\"\x1d\x82\xd3\xe4\x93\x02\x17:\x05query\"\x0e/v1/querybatch\x12\x81\x01\n" +
	"\x10DetermineVersion\x12\".osv.v1.DetermineVersionParameters\x1a\x18.osv.v1.VersionMatchList\"/\x82\xd3\xe4\x93\x02):\x05query\" /v1experimental/determineversion\x12~\n" +
	"\x0eImportFindings\x12 .osv.v1.ImportFindingsParameters\x1a\x19.osv.v1.ImportFindingList\"/\x82\xd3\xe4\x93\x02)\x12'/v1experimental/importfindings/{source}B\"Z osv.dev/bindings/go/internal/apib\x06proto3"

var (
	file_osv_service_v1_proto_rawDescOnce sync.Once
	file_osv_service_v1_proto_rawDescData []byte
)

func file_osv_service_v1_proto_rawDescGZIP() []byte {
	file_osv_service_v1_proto_rawDescOnce.Do(func() {
		file_osv_service_v1_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_osv_service_v1_proto_rawDesc), len(file_osv_service_v1_proto_rawDesc)))
	})
	return file_osv_service_v1_proto_rawDescData
}

var file_osv_service_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_osv_service_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_osv_service_v1_proto_goTypes = []any{
	(FileHash_HashType)(0),                     // 0: osv.v1.FileHash.HashType
	(VersionRepositoryInformation_RepoType)(0), // 1: osv.v1.VersionRepositoryInformation.RepoType
	(*VulnerabilityList)(nil),                  // 2: osv.v1.VulnerabilityList
	(*BatchVulnerabilityList)(nil),             // 3: osv.v1.BatchVulnerabilityList
	(*Query)(nil),                              // 4: osv.v1.Query
	(*BatchQuery)(nil),                         // 5: osv.v1.BatchQuery
	(*GetVulnByIdParameters)(nil),              // 6: osv.v1.GetVulnByIdParameters
	(*QueryAffectedParameters)(nil),            // 7: osv.v1.QueryAffectedParameters
	(*QueryAffectedBatchParameters)(nil),       // 8: osv.v1.QueryAffectedBatchParameters
	(*DetermineVersionParameters)(nil),         // 9: osv.v1.DetermineVersionParameters
	(*ImportFindingsParameters)(nil),           // 10: osv.v1.ImportFindingsParameters
	(*VersionQuery)(nil),                       // 11: osv.v1.VersionQuery
	(*FileHash)(nil),                           // 12: osv.v1.FileHash
	(*VersionMatchList)(nil),                   // 13: osv.v1.VersionMatchList
	(*ImportFindingList)(nil),                  // 14: osv.v1.ImportFindingList
	(*VersionMatch)(nil),                       // 15: osv.v1.VersionMatch
	(*VersionRepositoryInformation)(nil),       // 16: osv.v1.VersionRepositoryInformation
	(*osvschema.Vulnerability)(nil),            // 17: osv.Vulnerability
	(*osvschema.Package)(nil),                  // 18: osv.Package
	(*ImportFinding)(nil),                      // 19: osv.ImportFinding
}
var file_osv_service_v1_proto_depIdxs = []int32{
	17, // 0: osv.v1.VulnerabilityList.vulns:type_name -> osv.Vulnerability
	2,  // 1: osv.v1.BatchVulnerabilityList.results:type_name -> osv.v1.VulnerabilityList
	18, // 2: osv.v1.Query.package:type_name -> osv.Package
	4,  // 3: osv.v1.BatchQuery.queries:type_name -> osv.v1.Query
	4,  // 4: osv.v1.QueryAffectedParameters.query:type_name -> osv.v1.Query
	5,  // 5: osv.v1.QueryAffectedBatchParameters.query:type_name -> osv.v1.BatchQuery
	11, // 6: osv.v1.DetermineVersionParameters.query:type_name -> osv.v1.VersionQuery
	12, // 7: osv.v1.VersionQuery.file_hashes:type_name -> osv.v1.FileHash
	0,  // 8: osv.v1.FileHash.hash_type:type_name -> osv.v1.FileHash.HashType
	15, // 9: osv.v1.VersionMatchList.matches:type_name -> osv.v1.VersionMatch
	19, // 10: osv.v1.ImportFindingList.invalid_records:type_name -> osv.ImportFinding
	16, // 11: osv.v1.VersionMatch.repo_info:type_name -> osv.v1.VersionRepositoryInformation
	18, // 12: osv.v1.VersionMatch.osv_identifier:type_name -> osv.Package
	1,  // 13: osv.v1.VersionRepositoryInformation.type:type_name -> osv.v1.VersionRepositoryInformation.RepoType
	6,  // 14: osv.v1.OSV.GetVulnById:input_type -> osv.v1.GetVulnByIdParameters
	7,  // 15: osv.v1.OSV.QueryAffected:input_type -> osv.v1.QueryAffectedParameters
	8,  // 16: osv.v1.OSV.QueryAffectedBatch:input_type -> osv.v1.QueryAffectedBatchParameters
	9,  // 17: osv.v1.OSV.DetermineVersion:input_type -> osv.v1.DetermineVersionParameters
	10, // 18: osv.v1.OSV.ImportFindings:input_type -> osv.v1.ImportFindingsParameters
	17, // 19: osv.v1.OSV.GetVulnById:output_type -> osv.Vulnerability
	2,  // 20: osv.v1.OSV.QueryAffected:output_type -> osv.v1.VulnerabilityList
	3,  // 21: osv.v1.OSV.QueryAffectedBatch:output_type -> osv.v1.BatchVulnerabilityList
	13, // 22: osv.v1.OSV.DetermineVersion:output_type -> osv.v1.VersionMatchList
	14, // 23: osv.v1.OSV.ImportFindings:output_type -> osv.v1.ImportFindingList
	19, // [19:24] is the sub-list for method output_type
	14, // [14:19] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_osv_service_v1_proto_init() }
func file_osv_service_v1_proto_init() {
	if File_osv_service_v1_proto != nil {
		return
	}
	file_importfinding_proto_init()
	file_osv_service_v1_proto_msgTypes[2].OneofWrappers = []any{
		(*Query_Commit)(nil),
		(*Query_Version)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_osv_service_v1_proto_rawDesc), len(file_osv_service_v1_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_osv_service_v1_proto_goTypes,
		DependencyIndexes: file_osv_service_v1_proto_depIdxs,
		EnumInfos:         file_osv_service_v1_proto_enumTypes,
		MessageInfos:      file_osv_service_v1_proto_msgTypes,
	}.Build()
	File_osv_service_v1_proto = out.File
	file_osv_service_v1_proto_goTypes = nil
	file_osv_service_v1_proto_depIdxs = nil
}
