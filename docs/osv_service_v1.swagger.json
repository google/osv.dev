{
  "swagger": "2.0",
  "info": {
    "title": "OSV",
    "version": "1.0",
    "description": "# What is OSV?\n---\n\n### Introduction\n\nOSV is a vulnerability database for open source projects. It exposes an API that\nlets users of these projects query whether or not their versions are impacted.\n\nFor each vulnerability, we perform bisects to figure out the exact commit that\nintroduces the bug, as well the exact commit that fixes it. This is cross\nreferenced against upstream repositories to figure out the affected tags and\ncommit ranges.\n\n### How does the API work?\n\nThe API accepts a git commit hash or a version number and returns the\nlist of vulnerabilities that are present for that version.\n\n### Is there a rate limit?\n\nThere is a rate limit of 100 requests/min.\n\n### Where does the data come from?\n\nThis is currently filled with vulnerabilities found by [OSS-Fuzz] (mostly C/C++\nprojects). OSS-Fuzz is a continuous fuzzing service for open source software,\nwith over 350 open source projects integrated and has found over [25,000] bugs.\nThis will be extended in the future to\n[support other vulnerability sources](https://github.com/google/osv/issues/44).\n\nThe full list of vulnerabilities can be browsed at <https://osv.dev>.\n\n[OSS-Fuzz]: https://github.com/google/oss-fuzz\n[25,000]:\u00a0https://bugs.chromium.org/p/oss-fuzz/issues/list?q=-status%3AWontFix%2CDuplicate%20-component%3AInfra&can=1\n\n# Getting Started\n---\n\n### Using the API\n\nBrowse the reference section of this site to see examples of what you can do\nwith this API and how to use it.\n\nFor a quick example using curl, run:\n\n```\ncurl -X POST -d '{\"commit\": \"6879efc2c1596d11a6a6ad296f80063b558d5e0f\"}' \\\n    \"https://api.osv.dev/v1/query\"\n```\n\nNote that the format of the JSON returned is not yet stable and may be subject\nto minor changes.\n"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/query": {
      "post": {
        "summary": "Query vulnerabilities for a particular project at a given commit or\nversion.",
        "operationId": "OSV_QueryAffected",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VulnerabilityList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Query"
            }
          }
        ],
        "tags": [
          "api"
        ],
        "x-code-samples": [
          {
            "lang": "Curl example",
            "source": "curl -X POST -d \\\n  '{\"commit\": \"6879efc2c1596d11a6a6ad296f80063b558d5e0f\"}' \\\n  \"https://api.osv.dev/v1/query\"\n\ncurl -X POST -d \\\n  '{\"package\": {\"name\": \"mruby\"}, \"version\": \"2.1.2rc\"}' \\\n  \"https://api.osv.dev/v1/query\""
          }
        ]
      }
    },
    "/v1/vulns/{id}": {
      "get": {
        "summary": "Return a `Vulnerability` object for a given OSV ID.",
        "operationId": "OSV_GetVulnById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/osvVulnerability"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "api"
        ],
        "x-code-samples": [
          {
            "lang": "Curl example",
            "source": "curl \"https://api.osv.dev/v1/vulns/2020-111\""
          }
        ]
      }
    },
    "/v1new/query": {
      "post": {
        "summary": "Query vulnerabilities for a particular project at a given commit or\nversion.",
        "operationId": "OSV_QueryAffectedNew",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VulnerabilityList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Query"
            }
          }
        ],
        "tags": [
          "OSV"
        ]
      }
    },
    "/v1new/vulns/{id}": {
      "get": {
        "summary": "Return a `Vulnerability` object for a given OSV ID.",
        "operationId": "OSV_GetVulnByIdNew",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/osvVulnerability"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OSV"
        ]
      }
    }
  },
  "definitions": {
    "osvAffectedRange": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Required. The type of version information.",
          "allOf": [
            {
              "$ref": "#/definitions/osvAffectedRangeType"
            }
          ]
        },
        "repo": {
          "type": "string",
          "description": "Required if type is GIT. The publicly accessible URL of the repo that can\nbe directly passed to clone commands."
        },
        "introduced": {
          "type": "string",
          "description": "Strongly recommended. The earliest version/commit where this vulnerability\nwas introduced in. If not specified, *all* commits/versions prior to the\n`fixed` commit/version are assumed to be affected."
        },
        "fixed": {
          "type": "string",
          "description": "Optional only if `introduced` is specified. The version/commit that this\nvulnerability was fixed in. This must be reachable from the \"introduced\"\nversion/commit.\n\nIf the vulnerability is not fixed, this will be unset."
        }
      }
    },
    "osvAffectedRangeType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "GIT",
        "SEMVER",
        "ECOSYSTEM"
      ],
      "default": "UNSPECIFIED",
      "description": "Type of the version information."
    },
    "osvAffects": {
      "type": "object",
      "properties": {
        "ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/osvAffectedRange"
          },
          "description": "Required (at least one entry). The commit/version ranges that contain this\nvulnerability.\n\nWhen provided, OSV will attempt to detect and append additional ranges that\nmay be affected as well (e.g. cherry-picks to other branches)."
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. List of affected versions. This should match tag names in the\nupstream repository. OSV will populate or add to this automatically\nbased on the provided commit ranges."
        }
      },
      "description": "Affected versions and commits."
    },
    "osvPackage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Name of the package. Should match the name used in the package\necosystem (e.g. the npm package name). For C/C++ projects integrated in\nOSS-Fuzz, this is the name used for the integration."
        },
        "ecosystem": {
          "type": "string",
          "description": "Required. The ecosystem for this package. For vulnerabilities from OSS-Fuzz\nthat do not have a package ecosystem (e.g. C/C++ packages), this is\n\"OSS-Fuzz\".\nOther valid values are:\n  - \"Go\" for Go modules.\n  - \"PyPI\" for Python packages.\n  - \"NPM\" for NPM packages."
        },
        "purl": {
          "type": "string",
          "description": "Optional. The package URL for this package."
        }
      },
      "description": "Package information and version."
    },
    "osvReference": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/osvReferenceType",
          "description": "Required. The type of the reference."
        },
        "url": {
          "type": "string",
          "description": "Required. The URL."
        }
      },
      "description": "Reference URL."
    },
    "osvReferenceType": {
      "type": "string",
      "enum": [
        "NONE",
        "WEB",
        "ADVISORY",
        "REPORT",
        "FIX",
        "PACKAGE"
      ],
      "default": "NONE"
    },
    "osvSeverity": {
      "type": "string",
      "enum": [
        "NONE",
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ],
      "default": "NONE",
      "description": "Vulnerability severity information. The exact meaning of these levels are\nspecific to OSS-Fuzz."
    },
    "osvVulnerability": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The `id` field is a unique identifier for the vulnerability entry. It is a\nstring of the format `<DB>-<ENTRYID>`, where `DB` names the database and\n`ENTRYID` is in the format used by the database. For example:\n\u201cOSV-2020-111\u201d, \u201cCVE-2021-3114\u201d, or \u201cGHSA-vp9c-fpxx-744v\u201d."
        },
        "published": {
          "type": "string",
          "format": "date-time",
          "description": "The RFC3339 timestamp indicating when this entry was published."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The RFC3339 timestamp indicating when this entry was last modified."
        },
        "withdrawn": {
          "type": "string",
          "format": "date-time",
          "description": "Optional. The RFC3339 timestamp indicating when this entry is considered to\nbe withdrawn."
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. IDs for the same vulnerability in other databases."
        },
        "related": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. List of IDs of closely related vulnerabilities, such as the same\nproblem in alternate ecosystems."
        },
        "package": {
          "description": "Required. Package information.",
          "allOf": [
            {
              "$ref": "#/definitions/osvPackage"
            }
          ]
        },
        "summary": {
          "type": "string",
          "description": "Required. One line human readable summary for the vulnerability. It is\nrecommended to keep this under 120 characters."
        },
        "details": {
          "type": "string",
          "description": "Required. Any additional human readable details for the vulnerability."
        },
        "affects": {
          "description": "Required. Affected commit ranges and versions.",
          "allOf": [
            {
              "$ref": "#/definitions/osvAffects"
            }
          ]
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/osvReference"
          },
          "description": "Optional. URLs to more information/advisories (including the\nscheme e.g \"https://\")."
        },
        "severity": {
          "description": "Deprecated and will be removed in the future.",
          "allOf": [
            {
              "$ref": "#/definitions/osvSeverity"
            }
          ]
        },
        "database_specific": {
          "type": "object",
          "description": "Optional. JSON object holding additional information about the\nvulnerability as defined by the database for which the record applies."
        },
        "ecosystem_specific": {
          "type": "object",
          "description": "Optional. JSON object holding additional information about the\nvulnerability as defined by the ecosystem for which the record applies."
        }
      },
      "description": "A vulnerability entry.\nThe protobuf representation is *NOT* stable and only used for implementing\nthe JSON based API."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Query": {
      "type": "object",
      "properties": {
        "commit": {
          "type": "string",
          "description": "The commit hash to query for. If specified, `version` should not be set."
        },
        "version": {
          "type": "string",
          "description": "The version string to query for. A fuzzy match is done against upstream\nversions. If specified, `commit` should not be set."
        },
        "package": {
          "description": "The package to query against. When a `commit` hash is given, this is\noptional.",
          "allOf": [
            {
              "$ref": "#/definitions/osvPackage"
            }
          ]
        }
      },
      "description": "Query format."
    },
    "v1VulnerabilityList": {
      "type": "object",
      "properties": {
        "vulns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/osvVulnerability"
          }
        }
      },
      "description": "A list of Vulnerability entries."
    }
  },
  "host": "api.osv.dev",
  "tags": [
    {
      "name": "api",
      "x-displayName": "API",
      "description": "The API has 2 methods:"
    },
    {
      "name": "vulnerability_schema",
      "x-displayName": "Vulnerability schema",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/osvVulnerability\" />"
    },
    {
      "name": "faq",
      "x-displayName": "Frequently asked questions",
      "description": "## Why did you create OSV?\n\nWe created OSV to address some of the shortcomings of dealing with\nvulnerabilities in open source software.\n\nAs believers of automation, we initially built OSV for our\n[OSS-Fuzz](https://github.com/google/oss-fuzz) service, where we needed a way to\nstore, triage and query the large numbers of open source vulnerabilities we\ndiscover in an automated fashion.\n\nWe understand that fuzzing is not the only way vulnerabilities are discovered,\nand we plan to [extend our data with other sources](https://github.com/google/osv/issues/44)\nby working with open source communities.\n\n## Who is OSV for?\n\nOSV can be used by both:\n\n- Open source consumers: By querying our API to find vulnerabilities in their\n  dependencies.\n\n- Open source maintainers: By using our bisection and triage infrastructure to\n  determine accurate affected commits and versions when a vulnerability is\n  fixed.\n\n## How does OSV compare to the existing CVE process?\n\nWe plan to aggregate existing vulnerabilities feeds (such as CVEs). OSV\ncomplements CVEs by extending them with precise vulnerability metadata and\nmaking it easier to query for them (using either package versions or commits).\n\n## Where does the data come from?\n\nCurrently, our data aggregates [thousands of vulnerabilities](https://bugs.chromium.org/p/oss-fuzz/issues/list?q=Type%3DBug-Security%20-status%3AWontFix%2CDuplicate&can=1) found via fuzzing\n[380+ open source projects](https://github.com/google/oss-fuzz/tree/master/projects)\nintegrated with\n[OSS-Fuzz](https://github.com/google/oss-fuzz). We are planning to work with the\nopen source community to\n[expand this to various package ecosystems](https://github.com/google/osv/issues/44).\n\n## How are vulnerabilities represented?\n\nAll our vulnerabilities are described in a [simple format] easily used by\nautomation tools. This format is also intended to be easily human-editable and\nused for interoperability with vulnerability sources.\n\n[simple format]: https://osv.dev/docs/#tag/vulnerability_schema\n\n## How can I help onboard a new source of data?\n\nPlease let us know of your interest via either our [issue tracker](https://github.com/google/osv/issues)\nor the [mailing list](https://groups.google.com/g/osv-discuss).\n\nThe pipeline for this is still in progress (and open to feedback). You can\nfollow along on how this might look at at <https://github.com/google/osv/issues/44>.\n\nWe are looking for data sources that can provide:\n- Precise commit-level information on where vulnerability was introduced and where it got fixed (preferred).\n- Or a list of affected versions / tags.\n\nIf this information is not available, our infrastruture will require a reproducer\ntestcase to accurately determine this via build bisection. Our goal is to\nprovide [easy access](https://osv.dev/docs/#tag/api) to actionable\nvulnerabilities in a fully automated way.\n\n## How do you determine the introduced in / fixed in commits?\n\nWe perform bisections using the reproduction testcase and package binary to determine these values.\n\n## What does it mean when an introduced in / fixed in commit is a range?\n\nBisection may fail in some cases (e.g. build failures or reproduction flakes) and\nwe may show a narrow range \"A:B\" of commits instead of an exact commit. This means that the result lies in the range of commits from A (exclusive) to B (inclusive).\n\n## What if it's not feasible to compute the introduced in / fixed in commits?\n\nWe encourage all vulnerabilities to have reproduction steps and/or precise\ncommit level details where possible. However we understand that in some cases\nand package ecosystems this is not feasible at scale and does not provide as\nmuch value.\n\nIn these cases [Vulnerabilities] may omit the affected commit ranges and\nonly specify a list of affected versions instead.\n\n[Vulnerabilities]: https://osv.dev/docs/#tag/vulnerability_schema\n\n## Which version control systems (VCS) do you support?\n\nOur efforts are currently focused on projects that use git. Support for other\npopular version control systems will be added as we get cycles.\n\n## I'm a project maintainer. Can I edit the details of OSV entries for my project?\n\nWe are working on a way for project maintainers to edit relevant OSV\nvulnerabilities by creating a pull request. Please subscribe to our\n[mailing list](https://groups.google.com/g/osv-discuss) and\n[this issue](https://github.com/google/osv/issues/44) for updates.\n\n## Will I be able to see bugs that don\u2019t have a fix yet?\n\nWe comply with the OSS-Fuzz vulnerability disclosure policy, either 90 days from report or 30 days after a fix is checked in, whichever comes earlier. The vulnerabilities are hidden until the disclosure timeline is met.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "API",
      "tags": [
        "api"
      ]
    },
    {
      "name": "Schema",
      "tags": [
        "vulnerability_schema"
      ]
    },
    {
      "name": "Documentation",
      "tags": [
        "faq"
      ]
    }
  ]
}